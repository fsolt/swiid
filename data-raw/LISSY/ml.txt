From: <postbox@lisdatacenter.org>
Subject: job 1362412 ml
Date: June 20, 2025 at 10:35:21 AM CDT
To: <fsolt@mac.com>

############################### NOTICE TO USERS ###############################
                                                                        Use of the data in the LUXEMBOURG INCOME STUDY DATABASES is governed by regulations which do not allow copying or further distribution of the survey microdata.                                                     

Anyone violating these regulations will lose all privileges to the databases and may be subject to prosecution under the law. In addition, any attempt to circumvent the LIS processing system or unauthorized entry into the LIS computing system will result in prosecution.             
All papers written using the LUXEMBOURG INCOME STUDY DATABASES must be  submitted for entry into the Working Papers Series. Users of the LIS or LWS microdata are required to cite the data source in their list of references.                   

Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> 
> 
> 
> 
> 
> 
> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> 
> 
> options(error = expression(q('no')))
> ## Define functions 
> gini <- function(df, x) { 
+   df1 <- df[!is.na(df[[x]]), ] 
+   x <- as.vector(df1[[x]]) 
+   weight <- df1$wt 
+    
+   ox <- order(x) 
+   x <- as.vector(x)[ox] 
+   weight <- as.vector(weight)[ox] / sum(weight)  
+   p <- cumsum(weight) 
+   nu <- cumsum(weight * x) 
+   n <- length(nu) 
+   nu <- nu / nu[n] 
+   res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+   return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+   x <- var[order(var)] 
+   y <- wgt[order(var)] 
+   z <- cumsum(y) / sum(y) 
+   cop <- rep(NA, length(split))  
+   for (i in 1:length(cop)) { 
+     cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+   } 
+   return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+   tb <- ifelse(var < botline, botline, var) 
+   tb <- ifelse(tb > topline, topline, tb) 
+   return(tb) 
+ } 
>  
> setups <- function(df) { 
+   botline <- 0 
+   topline <- exp(log(wNtile(df$dhi, df$hpopwgt, 0.75)) + 3 * (log(wNtile(df$dhi, df$hpopwgt, 0.75)) - log(wNtile(df$dhi, df$hpopwgt, 0.25)))) 
+   df$oecdm <- 1 + .5 * (df$nhhmem - df$nhhmem13 - 1) + .3 * df$nhhmem13 
+   df$ae <- 1 + .7 * (df$nhhmem - df$nhhmem13 - 1) + .5 * df$nhhmem13 
+    
+   df$disp_hh <- topBottom(df$dhi, botline, topline) 
+   df$disp_sqrt <- df$disp_hh / (df$nhhmem ^ 0.5) 
+   df$disp_pc <- df$disp_hh / df$nhhmem 
+   df$disp_oecdm <- df$disp_hh / df$oecdm 
+   df$disp_ae <- df$disp_hh / df$ae 
+    
+   df$gross_hh <- topBottom(df$hitotal, botline, topline) 
+   df$gross_sqrt <- df$gross_hh / (df$nhhmem ^ 0.5) 
+   df$gross_pc <- df$gross_hh / df$nhhmem 
+   df$gross_oecdm <- df$gross_hh / df$oecdm 
+   df$gross_ae <- df$gross_hh / df$ae 
+    
+   df$market_hh <- topBottom(ifelse(!is.na(df$hiprivate), (df$hifactor + df$hiprivate), df$hifactor), botline, topline) 
+   df$market_sqrt <- df$market_hh / (df$nhhmem ^ 0.5) 
+   df$market_pc <- df$market_hh / df$nhhmem 
+   df$market_oecdm <- df$market_hh / df$oecdm 
+   df$market_ae <- df$market_hh / df$ae 
+    
+   df$con_hh <- topBottom(df$hcexp, botline, topline) 
+   df$con_sqrt <- df$con_hh / (df$nhhmem ^ 0.5) 
+   df$con_pc <- df$con_hh / df$nhhmem 
+   df$con_oecdm <- df$con_hh / df$oecdm 
+   df$con_ae <- df$con_hh / df$ae 
+    
+   return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+   data <- data[!is.na(data[[var]]), ] 
+   resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+   r_stat <- lapply(resamples, function(x) gini(x, var)) 
+   std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+   return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(list(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+   set.seed(324) 
+   ccs <- c("au", "at", "be", "br", "ca", "ci", "cl", "cn", "co", "cz", "dk",  
+            "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is", "in", 
+            "ie", "il", "it", "jp", "lt", "lu", "ml", "mx", "nl", "no", "pa", "py",  
+            "pe", "pl", "ps", "ro", "ru", "rs", "sk", "si", "za", "kr", "es", "se",  
+            "ch", "tw", "uk", "us", "uy", "vn", 
+            "iq", "jo", "ps", "so", "sd", "tn")  
+   cc <- tolower(cc) 
+   if (!cc %in% ccs) { 
+     stop("Please specify a LIS country in iso2c format") 
+   } 
+   last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+   yy <- as.character(c(c(63:99), paste0("0", 0:9), c(10:last_year_yy))) 
+  
+   datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+   vars <- c("dhi", "hitotal", "hifactor", "hiprivate", "hcexp", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+  
+   v <- c("market_hh", "market_sqrt", "market_pc", "market_oecdm", "market_ae", 
+          "gross_hh", "gross_sqrt", "gross_pc", "gross_oecdm", "gross_ae", 
+          "disp_hh", "disp_sqrt", "disp_pc", "disp_oecdm", "disp_ae", 
+          "con_hh", "con_sqrt", "con_pc", "con_oecdm", "con_ae") 
+    
+   for (ccyy in datasets) { 
+     cat("") 
+     df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+     if (!class(df)[1] == "try-error") { 
+       mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+       if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+         df <- setups(df) 
+         for (var in v) { 
+           if (grepl("hh", var)) { 
+             df$wt <- df$hpopwgt 
+           } else { 
+             df$wt <- df$hpopwgt * df$nhhmem 
+           } 
+           if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+             cat(paste(ccyy,  
+                       var,  
+                       gini(df, var), 
+                       boot_gini_se(df, var, reps = reps), 
+                       df$grossnet[1], 
+                       sep = ","), sep = "\n") 
+           } 
+         } 
+       } 
+     } 
+   } 
+ } 
>  
> # Call 
> get_ginis("ml") 
[1] "Loading dataset ml11h..."
ml11h,market_hh,0.5239,0.0086,200
ml11h,market_sqrt,0.4598,0.0106,200
ml11h,market_pc,0.4806,0.0104,200
ml11h,market_oecdm,0.4655,0.0108,200
ml11h,market_ae,0.4724,0.0115,200
ml11h,gross_hh,0.5239,0.0097,200
ml11h,gross_sqrt,0.4598,0.0095,200
ml11h,gross_pc,0.4806,0.0108,200
ml11h,gross_oecdm,0.4655,0.01,200
ml11h,gross_ae,0.4724,0.0112,200
ml11h,disp_hh,0.5239,0.0086,200
ml11h,disp_sqrt,0.4598,0.0092,200
ml11h,disp_pc,0.4806,0.0104,200
ml11h,disp_oecdm,0.4655,0.0116,200
ml11h,disp_ae,0.4724,0.0114,200
ml11h,con_hh,0.442,0.0092,200
ml11h,con_sqrt,0.3892,0.009,200
ml11h,con_pc,0.416,0.007,200
ml11h,con_oecdm,0.3897,0.0077,200
ml11h,con_ae,0.3998,0.0084,200
[1] "Loading dataset ml13h..."
ml13h,market_hh,0.5091,0.016,200
ml13h,market_sqrt,0.4537,0.0192,200
ml13h,market_pc,0.4691,0.0158,200
ml13h,market_oecdm,0.4489,0.0169,200
ml13h,market_ae,0.4563,0.0164,200
ml13h,gross_hh,0.5091,0.0137,200
ml13h,gross_sqrt,0.4537,0.0195,200
ml13h,gross_pc,0.4691,0.0161,200
ml13h,gross_oecdm,0.4489,0.0181,200
ml13h,gross_ae,0.4563,0.0169,200
ml13h,disp_hh,0.5091,0.0154,200
ml13h,disp_sqrt,0.4537,0.0191,200
ml13h,disp_pc,0.4691,0.0152,200
ml13h,disp_oecdm,0.4489,0.0169,200
ml13h,disp_ae,0.4563,0.0161,200
ml13h,con_hh,0.3791,0.0063,200
ml13h,con_sqrt,0.3118,0.007,200
ml13h,con_pc,0.3618,0.0065,200
ml13h,con_oecdm,0.3282,0.0065,200
ml13h,con_ae,0.3418,0.007,200
[1] "Loading dataset ml14h..."
ml14h,market_hh,0.3972,0.0055,200
ml14h,market_sqrt,0.3515,0.0057,200
ml14h,market_pc,0.3719,0.0059,200
ml14h,market_oecdm,0.3482,0.006,200
ml14h,market_ae,0.3567,0.0055,200
ml14h,gross_hh,0.3987,0.0063,200
ml14h,gross_sqrt,0.353,0.0061,200
ml14h,gross_pc,0.3725,0.006,200
ml14h,gross_oecdm,0.3479,0.0063,200
ml14h,gross_ae,0.3567,0.0054,200
ml14h,disp_hh,0.3987,0.0054,200
ml14h,disp_sqrt,0.353,0.0057,200
ml14h,disp_pc,0.3725,0.0056,200
ml14h,disp_oecdm,0.3479,0.0053,200
ml14h,disp_ae,0.3567,0.0052,200
ml14h,con_hh,0.3478,0.008,200
ml14h,con_sqrt,0.3124,0.0061,200
ml14h,con_pc,0.3573,0.0064,200
ml14h,con_oecdm,0.3274,0.0076,200
ml14h,con_ae,0.3395,0.0077,200
[1] "Loading dataset ml15h..."
ml15h,market_hh,0.4019,0.0058,200
ml15h,market_sqrt,0.3483,0.0057,200
ml15h,market_pc,0.3616,0.0053,200
ml15h,market_oecdm,0.3417,0.0057,200
ml15h,market_ae,0.3484,0.0051,200
ml15h,gross_hh,0.4003,0.0049,200
ml15h,gross_sqrt,0.3474,0.0066,200
ml15h,gross_pc,0.3611,0.005,200
ml15h,gross_oecdm,0.3402,0.0051,200
ml15h,gross_ae,0.3473,0.0057,200
ml15h,disp_hh,0.4003,0.0062,200
ml15h,disp_sqrt,0.3474,0.0065,200
ml15h,disp_pc,0.3611,0.0054,200
ml15h,disp_oecdm,0.3402,0.0048,200
ml15h,disp_ae,0.3473,0.0056,200
ml15h,con_hh,0.3497,0.0057,200
ml15h,con_sqrt,0.3133,0.0068,200
ml15h,con_pc,0.3507,0.0057,200
ml15h,con_oecdm,0.3224,0.0064,200
ml15h,con_ae,0.3334,0.0062,200
[1] "Loading dataset ml16h..."
ml16h,market_hh,0.3988,0.0052,200
ml16h,market_sqrt,0.3478,0.0048,200
ml16h,market_pc,0.3614,0.0044,200
ml16h,market_oecdm,0.3407,0.0044,200
ml16h,market_ae,0.3478,0.0043,200
ml16h,gross_hh,0.4017,0.005,200
ml16h,gross_sqrt,0.3524,0.0049,200
ml16h,gross_pc,0.3678,0.0055,200
ml16h,gross_oecdm,0.3462,0.0052,200
ml16h,gross_ae,0.3537,0.0047,200
ml16h,disp_hh,0.4017,0.0044,200
ml16h,disp_sqrt,0.3524,0.0047,200
ml16h,disp_pc,0.3678,0.0051,200
ml16h,disp_oecdm,0.3462,0.0053,200
ml16h,disp_ae,0.3537,0.0055,200
ml16h,con_hh,0.3563,0.0077,200
ml16h,con_sqrt,0.3173,0.0074,200
ml16h,con_pc,0.3505,0.0072,200
ml16h,con_oecdm,0.3228,0.0069,200
ml16h,con_ae,0.3335,0.0076,200
[1] "Loading dataset ml17h..."
ml17h,market_hh,0.3769,0.0044,200
ml17h,market_sqrt,0.3358,0.0051,200
ml17h,market_pc,0.3576,0.0046,200
ml17h,market_oecdm,0.3349,0.0038,200
ml17h,market_ae,0.3429,0.0042,200
ml17h,gross_hh,0.3771,0.0042,200
ml17h,gross_sqrt,0.3359,0.0049,200
ml17h,gross_pc,0.358,0.0041,200
ml17h,gross_oecdm,0.3345,0.0053,200
ml17h,gross_ae,0.3427,0.0047,200
ml17h,disp_hh,0.3771,0.0045,200
ml17h,disp_sqrt,0.3359,0.0048,200
ml17h,disp_pc,0.358,0.0039,200
ml17h,disp_oecdm,0.3345,0.0048,200
ml17h,disp_ae,0.3427,0.0045,200
ml17h,con_hh,0.3368,0.0042,200
ml17h,con_sqrt,0.3096,0.0046,200
ml17h,con_pc,0.3517,0.0044,200
ml17h,con_oecdm,0.3217,0.0044,200
ml17h,con_ae,0.3334,0.0047,200
[1] "Loading dataset ml18h..."
ml18h,market_hh,0.4014,0.0043,200
ml18h,market_sqrt,0.3401,0.0051,200
ml18h,market_pc,0.361,0.0056,200
ml18h,market_oecdm,0.3352,0.0048,200
ml18h,market_ae,0.3444,0.0058,200
ml18h,gross_hh,0.3994,0.0053,200
ml18h,gross_sqrt,0.339,0.0053,200
ml18h,gross_pc,0.3605,0.005,200
ml18h,gross_oecdm,0.3335,0.0055,200
ml18h,gross_ae,0.343,0.0053,200
ml18h,disp_hh,0.3994,0.0054,200
ml18h,disp_sqrt,0.339,0.0048,200
ml18h,disp_pc,0.3605,0.0052,200
ml18h,disp_oecdm,0.3335,0.0051,200
ml18h,disp_ae,0.343,0.0054,200
ml18h,con_hh,0.3484,0.0041,200
ml18h,con_sqrt,0.3125,0.0048,200
ml18h,con_pc,0.3655,0.004,200
ml18h,con_oecdm,0.3337,0.0044,200
ml18h,con_ae,0.3468,0.0041,200
[1] "Loading dataset ml19h..."
ml19h,market_hh,0.4033,0.0045,200
ml19h,market_sqrt,0.3658,0.0052,200
ml19h,market_pc,0.3988,0.0053,200
ml19h,market_oecdm,0.3694,0.0053,200
ml19h,market_ae,0.38,0.0048,200
ml19h,gross_hh,0.4059,0.005,200
ml19h,gross_sqrt,0.3686,0.0052,200
ml19h,gross_pc,0.4022,0.0045,200
ml19h,gross_oecdm,0.3721,0.0056,200
ml19h,gross_ae,0.3829,0.005,200
ml19h,disp_hh,0.4059,0.0044,200
ml19h,disp_sqrt,0.3686,0.0055,200
ml19h,disp_pc,0.4022,0.0047,200
ml19h,disp_oecdm,0.3721,0.0052,200
ml19h,disp_ae,0.3829,0.0051,200
ml19h,con_hh,0.3625,0.0049,200
ml19h,con_sqrt,0.3347,0.0047,200
ml19h,con_pc,0.404,0.0056,200
ml19h,con_oecdm,0.3628,0.0047,200
ml19h,con_ae,0.3791,0.0046,200
[1] "Loading dataset ml20h..."
ml20h,market_hh,0.3981,0.0045,200
ml20h,market_sqrt,0.3609,0.0047,200
ml20h,market_pc,0.3869,0.005,200
ml20h,market_oecdm,0.3635,0.0047,200
ml20h,market_ae,0.372,0.0039,200
ml20h,gross_hh,0.4007,0.0042,200
ml20h,gross_sqrt,0.3648,0.0052,200
ml20h,gross_pc,0.3909,0.0047,200
ml20h,gross_oecdm,0.3667,0.0053,200
ml20h,gross_ae,0.3754,0.0054,200
ml20h,disp_hh,0.4007,0.0051,200
ml20h,disp_sqrt,0.3648,0.0046,200
ml20h,disp_pc,0.3909,0.0043,200
ml20h,disp_oecdm,0.3667,0.0045,200
ml20h,disp_ae,0.3754,0.0051,200
ml20h,con_hh,0.3528,0.0042,200
ml20h,con_sqrt,0.325,0.0038,200
ml20h,con_pc,0.3682,0.0047,200
ml20h,con_oecdm,0.3397,0.0046,200
ml20h,con_ae,0.3508,0.0043,200
> 
> proc.time()
   user  system elapsed 
 70.228   0.423  72.841 


