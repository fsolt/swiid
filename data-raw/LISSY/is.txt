From: <postbox@lisdatacenter.org>
Subject: job 1362399 is
Date: June 20, 2025 at 10:27:59 AM CDT
To: <fsolt@mac.com>

############################### NOTICE TO USERS ###############################
                                                                        Use of the data in the LUXEMBOURG INCOME STUDY DATABASES is governed by regulations which do not allow copying or further distribution of the survey microdata.                                                     

Anyone violating these regulations will lose all privileges to the databases and may be subject to prosecution under the law. In addition, any attempt to circumvent the LIS processing system or unauthorized entry into the LIS computing system will result in prosecution.             
All papers written using the LUXEMBOURG INCOME STUDY DATABASES must be  submitted for entry into the Working Papers Series. Users of the LIS or LWS microdata are required to cite the data source in their list of references.                   

Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> 
> 
> 
> 
> 
> 
> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> 
> 
> options(error = expression(q('no')))
> ## Define functions 
> gini <- function(df, x) { 
+   df1 <- df[!is.na(df[[x]]), ] 
+   x <- as.vector(df1[[x]]) 
+   weight <- df1$wt 
+    
+   ox <- order(x) 
+   x <- as.vector(x)[ox] 
+   weight <- as.vector(weight)[ox] / sum(weight)  
+   p <- cumsum(weight) 
+   nu <- cumsum(weight * x) 
+   n <- length(nu) 
+   nu <- nu / nu[n] 
+   res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+   return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+   x <- var[order(var)] 
+   y <- wgt[order(var)] 
+   z <- cumsum(y) / sum(y) 
+   cop <- rep(NA, length(split))  
+   for (i in 1:length(cop)) { 
+     cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+   } 
+   return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+   tb <- ifelse(var < botline, botline, var) 
+   tb <- ifelse(tb > topline, topline, tb) 
+   return(tb) 
+ } 
>  
> setups <- function(df) { 
+   botline <- 0 
+   topline <- exp(log(wNtile(df$dhi, df$hpopwgt, 0.75)) + 3 * (log(wNtile(df$dhi, df$hpopwgt, 0.75)) - log(wNtile(df$dhi, df$hpopwgt, 0.25)))) 
+   df$oecdm <- 1 + .5 * (df$nhhmem - df$nhhmem13 - 1) + .3 * df$nhhmem13 
+   df$ae <- 1 + .7 * (df$nhhmem - df$nhhmem13 - 1) + .5 * df$nhhmem13 
+    
+   df$disp_hh <- topBottom(df$dhi, botline, topline) 
+   df$disp_sqrt <- df$disp_hh / (df$nhhmem ^ 0.5) 
+   df$disp_pc <- df$disp_hh / df$nhhmem 
+   df$disp_oecdm <- df$disp_hh / df$oecdm 
+   df$disp_ae <- df$disp_hh / df$ae 
+    
+   df$gross_hh <- topBottom(df$hitotal, botline, topline) 
+   df$gross_sqrt <- df$gross_hh / (df$nhhmem ^ 0.5) 
+   df$gross_pc <- df$gross_hh / df$nhhmem 
+   df$gross_oecdm <- df$gross_hh / df$oecdm 
+   df$gross_ae <- df$gross_hh / df$ae 
+    
+   df$market_hh <- topBottom(ifelse(!is.na(df$hiprivate), (df$hifactor + df$hiprivate), df$hifactor), botline, topline) 
+   df$market_sqrt <- df$market_hh / (df$nhhmem ^ 0.5) 
+   df$market_pc <- df$market_hh / df$nhhmem 
+   df$market_oecdm <- df$market_hh / df$oecdm 
+   df$market_ae <- df$market_hh / df$ae 
+    
+   df$con_hh <- topBottom(df$hcexp, botline, topline) 
+   df$con_sqrt <- df$con_hh / (df$nhhmem ^ 0.5) 
+   df$con_pc <- df$con_hh / df$nhhmem 
+   df$con_oecdm <- df$con_hh / df$oecdm 
+   df$con_ae <- df$con_hh / df$ae 
+    
+   return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+   data <- data[!is.na(data[[var]]), ] 
+   resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+   r_stat <- lapply(resamples, function(x) gini(x, var)) 
+   std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+   return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(list(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+   set.seed(324) 
+   ccs <- c("au", "at", "be", "br", "ca", "ci", "cl", "cn", "co", "cz", "dk",  
+            "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is", "in", 
+            "ie", "il", "it", "jp", "lt", "lu", "ml", "mx", "nl", "no", "pa", "py",  
+            "pe", "pl", "ps", "ro", "ru", "rs", "sk", "si", "za", "kr", "es", "se",  
+            "ch", "tw", "uk", "us", "uy", "vn", 
+            "iq", "jo", "ps", "so", "sd", "tn")  
+   cc <- tolower(cc) 
+   if (!cc %in% ccs) { 
+     stop("Please specify a LIS country in iso2c format") 
+   } 
+   last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+   yy <- as.character(c(c(63:99), paste0("0", 0:9), c(10:last_year_yy))) 
+  
+   datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+   vars <- c("dhi", "hitotal", "hifactor", "hiprivate", "hcexp", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+  
+   v <- c("market_hh", "market_sqrt", "market_pc", "market_oecdm", "market_ae", 
+          "gross_hh", "gross_sqrt", "gross_pc", "gross_oecdm", "gross_ae", 
+          "disp_hh", "disp_sqrt", "disp_pc", "disp_oecdm", "disp_ae", 
+          "con_hh", "con_sqrt", "con_pc", "con_oecdm", "con_ae") 
+    
+   for (ccyy in datasets) { 
+     cat("") 
+     df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+     if (!class(df)[1] == "try-error") { 
+       mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+       if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+         df <- setups(df) 
+         for (var in v) { 
+           if (grepl("hh", var)) { 
+             df$wt <- df$hpopwgt 
+           } else { 
+             df$wt <- df$hpopwgt * df$nhhmem 
+           } 
+           if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+             cat(paste(ccyy,  
+                       var,  
+                       gini(df, var), 
+                       boot_gini_se(df, var, reps = reps), 
+                       df$grossnet[1], 
+                       sep = ","), sep = "\n") 
+           } 
+         } 
+       } 
+     } 
+   } 
+ } 
>  
> # Call 
> get_ginis("is") 
[1] "Loading dataset is03h..."
is03h,market_hh,0.4549,0.0083,110
is03h,market_sqrt,0.3606,0.0059,110
is03h,market_pc,0.3834,0.0071,110
is03h,market_oecdm,0.3541,0.0063,110
is03h,market_ae,0.3608,0.0056,110
is03h,gross_hh,0.3627,0.006,110
is03h,gross_sqrt,0.2804,0.0053,110
is03h,gross_pc,0.2929,0.0057,110
is03h,gross_oecdm,0.2712,0.0051,110
is03h,gross_ae,0.2735,0.0053,110
is03h,disp_hh,0.3384,0.0063,110
is03h,disp_sqrt,0.2524,0.0057,110
is03h,disp_pc,0.267,0.006,110
is03h,disp_oecdm,0.2414,0.0057,110
is03h,disp_ae,0.244,0.0064,110
is03h,con_hh,NaN,NA,110
is03h,con_sqrt,NaN,NA,110
is03h,con_pc,NaN,NA,110
is03h,con_oecdm,NaN,NA,110
is03h,con_ae,NaN,NA,110
[1] "Loading dataset is04h..."
is04h,market_hh,0.4577,0.0082,110
is04h,market_sqrt,0.3639,0.0064,110
is04h,market_pc,0.3816,0.0077,110
is04h,market_oecdm,0.3577,0.0083,110
is04h,market_ae,0.3624,0.0075,110
is04h,gross_hh,0.3674,0.0067,110
is04h,gross_sqrt,0.2845,0.0068,110
is04h,gross_pc,0.296,0.0073,110
is04h,gross_oecdm,0.2764,0.0064,110
is04h,gross_ae,0.2781,0.0081,110
is04h,disp_hh,0.3485,0.0072,110
is04h,disp_sqrt,0.2607,0.0079,110
is04h,disp_pc,0.2736,0.0078,110
is04h,disp_oecdm,0.2515,0.0084,110
is04h,disp_ae,0.2532,0.0078,110
is04h,con_hh,NaN,NA,110
is04h,con_sqrt,NaN,NA,110
is04h,con_pc,NaN,NA,110
is04h,con_oecdm,NaN,NA,110
is04h,con_ae,NaN,NA,110
[1] "Loading dataset is05h..."
is05h,market_hh,0.4594,0.0082,110
is05h,market_sqrt,0.3808,0.0068,110
is05h,market_pc,0.4007,0.008,110
is05h,market_oecdm,0.375,0.0078,110
is05h,market_ae,0.3807,0.0083,110
is05h,gross_hh,0.3768,0.0075,110
is05h,gross_sqrt,0.3076,0.0079,110
is05h,gross_pc,0.3196,0.0082,110
is05h,gross_oecdm,0.2992,0.0074,110
is05h,gross_ae,0.3015,0.0089,110
is05h,disp_hh,0.361,0.009,110
is05h,disp_sqrt,0.2893,0.0082,110
is05h,disp_pc,0.3023,0.0098,110
is05h,disp_oecdm,0.2795,0.0089,110
is05h,disp_ae,0.2819,0.0097,110
is05h,con_hh,NaN,NA,110
is05h,con_sqrt,NaN,NA,110
is05h,con_pc,NaN,NA,110
is05h,con_oecdm,NaN,NA,110
is05h,con_ae,NaN,NA,110
[1] "Loading dataset is06h..."
is06h,market_hh,0.4689,0.009,110
is06h,market_sqrt,0.3908,0.0082,110
is06h,market_pc,0.4048,0.0078,110
is06h,market_oecdm,0.3853,0.0088,110
is06h,market_ae,0.389,0.0073,110
is06h,gross_hh,0.3894,0.0075,110
is06h,gross_sqrt,0.3207,0.0071,110
is06h,gross_pc,0.3267,0.0082,110
is06h,gross_oecdm,0.3126,0.0084,110
is06h,gross_ae,0.313,0.0078,110
is06h,disp_hh,0.378,0.0079,110
is06h,disp_sqrt,0.3067,0.0087,110
is06h,disp_pc,0.3122,0.0076,110
is06h,disp_oecdm,0.2974,0.0089,110
is06h,disp_ae,0.2975,0.0094,110
is06h,con_hh,NaN,NA,110
is06h,con_sqrt,NaN,NA,110
is06h,con_pc,NaN,NA,110
is06h,con_oecdm,NaN,NA,110
is06h,con_ae,NaN,NA,110
[1] "Loading dataset is07h..."
is07h,market_hh,0.4646,0.0092,110
is07h,market_sqrt,0.3824,0.0078,110
is07h,market_pc,0.3965,0.0072,110
is07h,market_oecdm,0.3769,0.0093,110
is07h,market_ae,0.3803,0.008,110
is07h,gross_hh,0.3862,0.0071,110
is07h,gross_sqrt,0.3133,0.0078,110
is07h,gross_pc,0.3195,0.0071,110
is07h,gross_oecdm,0.3049,0.0083,110
is07h,gross_ae,0.3052,0.0076,110
is07h,disp_hh,0.3735,0.0088,110
is07h,disp_sqrt,0.2983,0.0068,110
is07h,disp_pc,0.3044,0.0074,110
is07h,disp_oecdm,0.2887,0.0091,110
is07h,disp_ae,0.2888,0.0089,110
is07h,con_hh,NaN,NA,110
is07h,con_sqrt,NaN,NA,110
is07h,con_pc,NaN,NA,110
is07h,con_oecdm,NaN,NA,110
is07h,con_ae,NaN,NA,110
[1] "Loading dataset is08h..."
is08h,market_hh,0.4667,0.0088,110
is08h,market_sqrt,0.3872,0.0084,110
is08h,market_pc,0.3987,0.008,110
is08h,market_oecdm,0.3815,0.008,110
is08h,market_ae,0.3841,0.0089,110
is08h,gross_hh,0.3984,0.0075,110
is08h,gross_sqrt,0.3261,0.0092,110
is08h,gross_pc,0.334,0.0075,110
is08h,gross_oecdm,0.3185,0.0079,110
is08h,gross_ae,0.3194,0.0082,110
is08h,disp_hh,0.3878,0.0071,110
is08h,disp_sqrt,0.3139,0.0083,110
is08h,disp_pc,0.3238,0.0084,110
is08h,disp_oecdm,0.3053,0.008,110
is08h,disp_ae,0.3068,0.0079,110
is08h,con_hh,NaN,NA,110
is08h,con_sqrt,NaN,NA,110
is08h,con_pc,NaN,NA,110
is08h,con_oecdm,NaN,NA,110
is08h,con_ae,NaN,NA,110
[1] "Loading dataset is09h..."
is09h,market_hh,0.4742,0.0069,110
is09h,market_sqrt,0.3837,0.006,110
is09h,market_pc,0.398,0.0053,110
is09h,market_oecdm,0.3791,0.0063,110
is09h,market_ae,0.3824,0.0066,110
is09h,gross_hh,0.3765,0.0056,110
is09h,gross_sqrt,0.2973,0.0054,110
is09h,gross_pc,0.3097,0.0055,110
is09h,gross_oecdm,0.2904,0.0052,110
is09h,gross_ae,0.2921,0.0055,110
is09h,disp_hh,0.3574,0.0059,110
is09h,disp_sqrt,0.2758,0.0055,110
is09h,disp_pc,0.2912,0.0062,110
is09h,disp_oecdm,0.268,0.0059,110
is09h,disp_ae,0.2704,0.0059,110
is09h,con_hh,NaN,NA,110
is09h,con_sqrt,NaN,NA,110
is09h,con_pc,NaN,NA,110
is09h,con_oecdm,NaN,NA,110
is09h,con_ae,NaN,NA,110
[1] "Loading dataset is10h..."
is10h,market_hh,0.4988,0.0073,110
is10h,market_sqrt,0.3994,0.0063,110
is10h,market_pc,0.411,0.0064,110
is10h,market_oecdm,0.3937,0.0066,110
is10h,market_ae,0.3963,0.0061,110
is10h,gross_hh,0.3801,0.0055,110
is10h,gross_sqrt,0.2951,0.0067,110
is10h,gross_pc,0.3005,0.0065,110
is10h,gross_oecdm,0.2858,0.0061,110
is10h,gross_ae,0.2854,0.006,110
is10h,disp_hh,0.3514,0.0058,110
is10h,disp_sqrt,0.2613,0.0059,110
is10h,disp_pc,0.27,0.0062,110
is10h,disp_oecdm,0.2504,0.0061,110
is10h,disp_ae,0.2505,0.0064,110
is10h,con_hh,NaN,NA,110
is10h,con_sqrt,NaN,NA,110
is10h,con_pc,NaN,NA,110
is10h,con_oecdm,NaN,NA,110
is10h,con_ae,NaN,NA,110
[1] "Loading dataset is11h..."
is11h,market_hh,0.4961,0.0064,110
is11h,market_sqrt,0.4023,0.006,110
is11h,market_pc,0.4165,0.0064,110
is11h,market_oecdm,0.3961,0.0067,110
is11h,market_ae,0.3997,0.0076,110
is11h,gross_hh,0.3708,0.0051,110
is11h,gross_sqrt,0.2924,0.0045,110
is11h,gross_pc,0.3013,0.0046,110
is11h,gross_oecdm,0.2829,0.0057,110
is11h,gross_ae,0.2837,0.0054,110
is11h,disp_hh,0.3347,0.0052,110
is11h,disp_sqrt,0.2501,0.0053,110
is11h,disp_pc,0.2646,0.0049,110
is11h,disp_oecdm,0.2388,0.0057,110
is11h,disp_ae,0.241,0.0054,110
is11h,con_hh,NaN,NA,110
is11h,con_sqrt,NaN,NA,110
is11h,con_pc,NaN,NA,110
is11h,con_oecdm,NaN,NA,110
is11h,con_ae,NaN,NA,110
[1] "Loading dataset is12h..."
is12h,market_hh,0.4919,0.0078,110
is12h,market_sqrt,0.3949,0.0058,110
is12h,market_pc,0.4055,0.0057,110
is12h,market_oecdm,0.3871,0.0067,110
is12h,market_ae,0.3899,0.0065,110
is12h,gross_hh,0.3736,0.0057,110
is12h,gross_sqrt,0.2937,0.0054,110
is12h,gross_pc,0.2995,0.0055,110
is12h,gross_oecdm,0.2824,0.0057,110
is12h,gross_ae,0.2827,0.0052,110
is12h,disp_hh,0.3461,0.0062,110
is12h,disp_sqrt,0.261,0.006,110
is12h,disp_pc,0.2685,0.0053,110
is12h,disp_oecdm,0.2475,0.0061,110
is12h,disp_ae,0.2479,0.0052,110
is12h,con_hh,NaN,NA,110
is12h,con_sqrt,NaN,NA,110
is12h,con_pc,NaN,NA,110
is12h,con_oecdm,NaN,NA,110
is12h,con_ae,NaN,NA,110
[1] "Loading dataset is13h..."
is13h,market_hh,0.482,0.0074,110
is13h,market_sqrt,0.3823,0.0059,110
is13h,market_pc,0.3947,0.0062,110
is13h,market_oecdm,0.3742,0.0077,110
is13h,market_ae,0.3776,0.0069,110
is13h,gross_hh,0.3629,0.005,110
is13h,gross_sqrt,0.281,0.0048,110
is13h,gross_pc,0.287,0.0053,110
is13h,gross_oecdm,0.2693,0.005,110
is13h,gross_ae,0.2696,0.0055,110
is13h,disp_hh,0.3365,0.0052,110
is13h,disp_sqrt,0.2489,0.0047,110
is13h,disp_pc,0.2567,0.0047,110
is13h,disp_oecdm,0.2352,0.0057,110
is13h,disp_ae,0.2358,0.0049,110
is13h,con_hh,NaN,NA,110
is13h,con_sqrt,NaN,NA,110
is13h,con_pc,NaN,NA,110
is13h,con_oecdm,NaN,NA,110
is13h,con_ae,NaN,NA,110
[1] "Loading dataset is14h..."
is14h,market_hh,0.5033,0.0086,110
is14h,market_sqrt,0.4002,0.0076,110
is14h,market_pc,0.4139,0.0084,110
is14h,market_oecdm,0.3923,0.0083,110
is14h,market_ae,0.3962,0.0083,110
is14h,gross_hh,0.3864,0.0075,110
is14h,gross_sqrt,0.3008,0.0069,110
is14h,gross_pc,0.3074,0.0083,110
is14h,gross_oecdm,0.2893,0.0071,110
is14h,gross_ae,0.2899,0.0067,110
is14h,disp_hh,0.3634,0.0078,110
is14h,disp_sqrt,0.2737,0.0067,110
is14h,disp_pc,0.2829,0.0094,110
is14h,disp_oecdm,0.2608,0.0074,110
is14h,disp_ae,0.2618,0.0078,110
is14h,con_hh,NaN,NA,110
is14h,con_sqrt,NaN,NA,110
is14h,con_pc,NaN,NA,110
is14h,con_oecdm,NaN,NA,110
is14h,con_ae,NaN,NA,110
[1] "Loading dataset is15h..."
is15h,market_hh,0.4842,0.0074,110
is15h,market_sqrt,0.3831,0.006,110
is15h,market_pc,0.3944,0.007,110
is15h,market_oecdm,0.3738,0.0073,110
is15h,market_ae,0.3772,0.0064,110
is15h,gross_hh,0.3755,0.006,110
is15h,gross_sqrt,0.289,0.0055,110
is15h,gross_pc,0.2932,0.0056,110
is15h,gross_oecdm,0.2761,0.0059,110
is15h,gross_ae,0.2764,0.0061,110
is15h,disp_hh,0.3527,0.0063,110
is15h,disp_sqrt,0.2615,0.0066,110
is15h,disp_pc,0.2662,0.0067,110
is15h,disp_oecdm,0.2462,0.0056,110
is15h,disp_ae,0.2463,0.0068,110
is15h,con_hh,NaN,NA,110
is15h,con_sqrt,NaN,NA,110
is15h,con_pc,NaN,NA,110
is15h,con_oecdm,NaN,NA,110
is15h,con_ae,NaN,NA,110
[1] "Loading dataset is16h..."
is16h,market_hh,0.478,0.0092,110
is16h,market_sqrt,0.3768,0.007,110
is16h,market_pc,0.3902,0.0075,110
is16h,market_oecdm,0.3685,0.0067,110
is16h,market_ae,0.3719,0.0067,110
is16h,gross_hh,0.3767,0.0065,110
is16h,gross_sqrt,0.2889,0.0063,110
is16h,gross_pc,0.2939,0.006,110
is16h,gross_oecdm,0.277,0.0063,110
is16h,gross_ae,0.2767,0.0077,110
is16h,disp_hh,0.3571,0.0058,110
is16h,disp_sqrt,0.2653,0.0071,110
is16h,disp_pc,0.2717,0.0072,110
is16h,disp_oecdm,0.2517,0.0065,110
is16h,disp_ae,0.2516,0.0065,110
is16h,con_hh,NaN,NA,110
is16h,con_sqrt,NaN,NA,110
is16h,con_pc,NaN,NA,110
is16h,con_oecdm,NaN,NA,110
is16h,con_ae,NaN,NA,110
[1] "Loading dataset is17h..."
is17h,market_hh,0.4725,0.0076,110
is17h,market_sqrt,0.365,0.008,110
is17h,market_pc,0.381,0.0071,110
is17h,market_oecdm,0.3562,0.007,110
is17h,market_ae,0.3606,0.008,110
is17h,gross_hh,0.3617,0.0059,110
is17h,gross_sqrt,0.2727,0.006,110
is17h,gross_pc,0.2802,0.007,110
is17h,gross_oecdm,0.2602,0.0058,110
is17h,gross_ae,0.2606,0.0065,110
is17h,disp_hh,0.343,0.0056,110
is17h,disp_sqrt,0.2506,0.0062,110
is17h,disp_pc,0.2596,0.0064,110
is17h,disp_oecdm,0.2367,0.0067,110
is17h,disp_ae,0.2372,0.0059,110
is17h,con_hh,NaN,NA,110
is17h,con_sqrt,NaN,NA,110
is17h,con_pc,NaN,NA,110
is17h,con_oecdm,NaN,NA,110
is17h,con_ae,NaN,NA,110
> 
> proc.time()
   user  system elapsed 
 97.641   0.287 100.826 


