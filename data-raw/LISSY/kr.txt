From: <postbox@lisdatacenter.org>
Subject: job 1362435 kr
Date: June 20, 2025 at 11:02:56 AM CDT
To: <fsolt@mac.com>

############################### NOTICE TO USERS ###############################
                                                                        Use of the data in the LUXEMBOURG INCOME STUDY DATABASES is governed by regulations which do not allow copying or further distribution of the survey microdata.                                                     

Anyone violating these regulations will lose all privileges to the databases and may be subject to prosecution under the law. In addition, any attempt to circumvent the LIS processing system or unauthorized entry into the LIS computing system will result in prosecution.             
All papers written using the LUXEMBOURG INCOME STUDY DATABASES must be  submitted for entry into the Working Papers Series. Users of the LIS or LWS microdata are required to cite the data source in their list of references.                   

Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> 
> 
> 
> 
> 
> 
> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> 
> 
> options(error = expression(q('no')))
> ## Define functions 
> gini <- function(df, x) { 
+   df1 <- df[!is.na(df[[x]]), ] 
+   x <- as.vector(df1[[x]]) 
+   weight <- df1$wt 
+    
+   ox <- order(x) 
+   x <- as.vector(x)[ox] 
+   weight <- as.vector(weight)[ox] / sum(weight)  
+   p <- cumsum(weight) 
+   nu <- cumsum(weight * x) 
+   n <- length(nu) 
+   nu <- nu / nu[n] 
+   res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+   return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+   x <- var[order(var)] 
+   y <- wgt[order(var)] 
+   z <- cumsum(y) / sum(y) 
+   cop <- rep(NA, length(split))  
+   for (i in 1:length(cop)) { 
+     cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+   } 
+   return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+   tb <- ifelse(var < botline, botline, var) 
+   tb <- ifelse(tb > topline, topline, tb) 
+   return(tb) 
+ } 
>  
> setups <- function(df) { 
+   botline <- 0 
+   topline <- exp(log(wNtile(df$dhi, df$hpopwgt, 0.75)) + 3 * (log(wNtile(df$dhi, df$hpopwgt, 0.75)) - log(wNtile(df$dhi, df$hpopwgt, 0.25)))) 
+   df$oecdm <- 1 + .5 * (df$nhhmem - df$nhhmem13 - 1) + .3 * df$nhhmem13 
+   df$ae <- 1 + .7 * (df$nhhmem - df$nhhmem13 - 1) + .5 * df$nhhmem13 
+    
+   df$disp_hh <- topBottom(df$dhi, botline, topline) 
+   df$disp_sqrt <- df$disp_hh / (df$nhhmem ^ 0.5) 
+   df$disp_pc <- df$disp_hh / df$nhhmem 
+   df$disp_oecdm <- df$disp_hh / df$oecdm 
+   df$disp_ae <- df$disp_hh / df$ae 
+    
+   df$gross_hh <- topBottom(df$hitotal, botline, topline) 
+   df$gross_sqrt <- df$gross_hh / (df$nhhmem ^ 0.5) 
+   df$gross_pc <- df$gross_hh / df$nhhmem 
+   df$gross_oecdm <- df$gross_hh / df$oecdm 
+   df$gross_ae <- df$gross_hh / df$ae 
+    
+   df$market_hh <- topBottom(ifelse(!is.na(df$hiprivate), (df$hifactor + df$hiprivate), df$hifactor), botline, topline) 
+   df$market_sqrt <- df$market_hh / (df$nhhmem ^ 0.5) 
+   df$market_pc <- df$market_hh / df$nhhmem 
+   df$market_oecdm <- df$market_hh / df$oecdm 
+   df$market_ae <- df$market_hh / df$ae 
+    
+   df$con_hh <- topBottom(df$hcexp, botline, topline) 
+   df$con_sqrt <- df$con_hh / (df$nhhmem ^ 0.5) 
+   df$con_pc <- df$con_hh / df$nhhmem 
+   df$con_oecdm <- df$con_hh / df$oecdm 
+   df$con_ae <- df$con_hh / df$ae 
+    
+   return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+   data <- data[!is.na(data[[var]]), ] 
+   resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+   r_stat <- lapply(resamples, function(x) gini(x, var)) 
+   std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+   return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(list(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+   set.seed(324) 
+   ccs <- c("au", "at", "be", "br", "ca", "ci", "cl", "cn", "co", "cz", "dk",  
+            "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is", "in", 
+            "ie", "il", "it", "jp", "lt", "lu", "ml", "mx", "nl", "no", "pa", "py",  
+            "pe", "pl", "ps", "ro", "ru", "rs", "sk", "si", "za", "kr", "es", "se",  
+            "ch", "tw", "uk", "us", "uy", "vn", 
+            "iq", "jo", "ps", "so", "sd", "tn")  
+   cc <- tolower(cc) 
+   if (!cc %in% ccs) { 
+     stop("Please specify a LIS country in iso2c format") 
+   } 
+   last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+   yy <- as.character(c(c(63:99), paste0("0", 0:9), c(10:last_year_yy))) 
+  
+   datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+   vars <- c("dhi", "hitotal", "hifactor", "hiprivate", "hcexp", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+  
+   v <- c("market_hh", "market_sqrt", "market_pc", "market_oecdm", "market_ae", 
+          "gross_hh", "gross_sqrt", "gross_pc", "gross_oecdm", "gross_ae", 
+          "disp_hh", "disp_sqrt", "disp_pc", "disp_oecdm", "disp_ae", 
+          "con_hh", "con_sqrt", "con_pc", "con_oecdm", "con_ae") 
+    
+   for (ccyy in datasets) { 
+     cat("") 
+     df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+     if (!class(df)[1] == "try-error") { 
+       mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+       if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+         df <- setups(df) 
+         for (var in v) { 
+           if (grepl("hh", var)) { 
+             df$wt <- df$hpopwgt 
+           } else { 
+             df$wt <- df$hpopwgt * df$nhhmem 
+           } 
+           if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+             cat(paste(ccyy,  
+                       var,  
+                       gini(df, var), 
+                       boot_gini_se(df, var, reps = reps), 
+                       df$grossnet[1], 
+                       sep = ","), sep = "\n") 
+           } 
+         } 
+       } 
+     } 
+   } 
+ } 
>  
> # Call 
> get_ginis("kr") 
[1] "Loading dataset kr06h..."
kr06h,market_hh,0.3901,0.0031,110
kr06h,market_sqrt,0.3304,0.0028,110
kr06h,market_pc,0.3427,0.003,110
kr06h,market_oecdm,0.3304,0.0028,110
kr06h,market_ae,0.3328,0.0027,110
kr06h,gross_hh,0.3702,0.0029,110
kr06h,gross_sqrt,0.3135,0.0025,110
kr06h,gross_pc,0.3257,0.0027,110
kr06h,gross_oecdm,0.3129,0.003,110
kr06h,gross_ae,0.3153,0.0025,110
kr06h,disp_hh,0.3616,0.0028,110
kr06h,disp_sqrt,0.3058,0.0029,110
kr06h,disp_pc,0.3198,0.0029,110
kr06h,disp_oecdm,0.3051,0.0025,110
kr06h,disp_ae,0.3081,0.0028,110
kr06h,con_hh,0.3244,0.0025,110
kr06h,con_sqrt,0.2578,0.0025,110
kr06h,con_pc,0.2661,0.0026,110
kr06h,con_oecdm,0.2568,0.0028,110
kr06h,con_ae,0.2572,0.0026,110
[1] "Loading dataset kr08h..."
kr08h,market_hh,0.4105,0.0035,110
kr08h,market_sqrt,0.3441,0.0031,110
kr08h,market_pc,0.3554,0.0028,110
kr08h,market_oecdm,0.3442,0.0033,110
kr08h,market_ae,0.3461,0.0038,110
kr08h,gross_hh,0.3862,0.0031,110
kr08h,gross_sqrt,0.323,0.0031,110
kr08h,gross_pc,0.3343,0.0031,110
kr08h,gross_oecdm,0.3227,0.0031,110
kr08h,gross_ae,0.3245,0.0034,110
kr08h,disp_hh,0.3767,0.0033,110
kr08h,disp_sqrt,0.3139,0.0031,110
kr08h,disp_pc,0.3271,0.003,110
kr08h,disp_oecdm,0.3135,0.0032,110
kr08h,disp_ae,0.316,0.0027,110
kr08h,con_hh,0.3273,0.0031,110
kr08h,con_sqrt,0.2532,0.0032,110
kr08h,con_pc,0.2625,0.0028,110
kr08h,con_oecdm,0.2526,0.0029,110
kr08h,con_ae,0.2527,0.0025,110
[1] "Loading dataset kr10h..."
kr10h,market_hh,0.414,0.0039,110
kr10h,market_sqrt,0.3415,0.0032,110
kr10h,market_pc,0.3543,0.0033,110
kr10h,market_oecdm,0.3405,0.0032,110
kr10h,market_ae,0.3433,0.003,110
kr10h,gross_hh,0.3847,0.0036,110
kr10h,gross_sqrt,0.3172,0.0029,110
kr10h,gross_pc,0.3292,0.0031,110
kr10h,gross_oecdm,0.3155,0.0033,110
kr10h,gross_ae,0.318,0.0032,110
kr10h,disp_hh,0.377,0.0033,110
kr10h,disp_sqrt,0.31,0.0033,110
kr10h,disp_pc,0.324,0.003,110
kr10h,disp_oecdm,0.3084,0.0031,110
kr10h,disp_ae,0.3114,0.0031,110
kr10h,con_hh,0.3329,0.0027,110
kr10h,con_sqrt,0.2561,0.0028,110
kr10h,con_pc,0.2625,0.003,110
kr10h,con_oecdm,0.2546,0.0028,110
kr10h,con_ae,0.254,0.0027,110
[1] "Loading dataset kr12h..."
kr12h,market_hh,0.415,0.0039,110
kr12h,market_sqrt,0.3379,0.0037,110
kr12h,market_pc,0.3484,0.0035,110
kr12h,market_oecdm,0.3363,0.0034,110
kr12h,market_ae,0.3383,0.0034,110
kr12h,gross_hh,0.3856,0.0036,110
kr12h,gross_sqrt,0.3145,0.003,110
kr12h,gross_pc,0.3242,0.0035,110
kr12h,gross_oecdm,0.3121,0.0033,110
kr12h,gross_ae,0.3139,0.0036,110
kr12h,disp_hh,0.3772,0.0031,110
kr12h,disp_sqrt,0.3068,0.0036,110
kr12h,disp_pc,0.3186,0.0034,110
kr12h,disp_oecdm,0.3045,0.0034,110
kr12h,disp_ae,0.3069,0.003,110
kr12h,con_hh,0.3265,0.0031,110
kr12h,con_sqrt,0.2494,0.003,110
kr12h,con_pc,0.257,0.0027,110
kr12h,con_oecdm,0.2474,0.003,110
kr12h,con_ae,0.2473,0.0025,110
[1] "Loading dataset kr14h..."
kr14h,market_hh,0.4251,0.0036,110
kr14h,market_sqrt,0.3414,0.0032,110
kr14h,market_pc,0.3538,0.0033,110
kr14h,market_oecdm,0.3409,0.0036,110
kr14h,market_ae,0.3433,0.0034,110
kr14h,gross_hh,0.3866,0.0034,110
kr14h,gross_sqrt,0.3105,0.0037,110
kr14h,gross_pc,0.3214,0.0034,110
kr14h,gross_oecdm,0.3093,0.0031,110
kr14h,gross_ae,0.3111,0.003,110
kr14h,disp_hh,0.3773,0.0032,110
kr14h,disp_sqrt,0.3022,0.003,110
kr14h,disp_pc,0.3151,0.0032,110
kr14h,disp_oecdm,0.3011,0.0029,110
kr14h,disp_ae,0.3035,0.003,110
kr14h,con_hh,0.3422,0.0033,110
kr14h,con_sqrt,0.2619,0.0031,110
kr14h,con_pc,0.2678,0.0032,110
kr14h,con_oecdm,0.2605,0.0031,110
kr14h,con_ae,0.2596,0.0028,110
[1] "Loading dataset kr16h..."
kr16h,market_hh,0.4746,0.0033,110
kr16h,market_sqrt,0.3995,0.0038,110
kr16h,market_pc,0.4002,0.0034,110
kr16h,market_oecdm,0.3953,0.0037,110
kr16h,market_ae,0.3951,0.0032,110
kr16h,gross_hh,0.4364,0.0032,110
kr16h,gross_sqrt,0.368,0.004,110
kr16h,gross_pc,0.3664,0.0036,110
kr16h,gross_oecdm,0.3627,0.0039,110
kr16h,gross_ae,0.3617,0.0035,110
kr16h,disp_hh,0.4222,0.0024,110
kr16h,disp_sqrt,0.3536,0.0035,110
kr16h,disp_pc,0.3534,0.0027,110
kr16h,disp_oecdm,0.348,0.0028,110
kr16h,disp_ae,0.3475,0.0026,110
kr16h,con_hh,0.357,0.0022,110
kr16h,con_sqrt,0.2771,0.0027,110
kr16h,con_pc,0.2737,0.0024,110
kr16h,con_oecdm,0.271,0.0025,110
kr16h,con_ae,0.2685,0.0027,110
[1] "Loading dataset kr17h..."
kr17h,market_hh,0.4778,0.003,110
kr17h,market_sqrt,0.4021,0.0035,110
kr17h,market_pc,0.4,0.0031,110
kr17h,market_oecdm,0.3971,0.0032,110
kr17h,market_ae,0.396,0.0035,110
kr17h,gross_hh,0.4374,0.0027,110
kr17h,gross_sqrt,0.369,0.0031,110
kr17h,gross_pc,0.3647,0.0031,110
kr17h,gross_oecdm,0.3628,0.0031,110
kr17h,gross_ae,0.361,0.0034,110
kr17h,disp_hh,0.4209,0.0027,110
kr17h,disp_sqrt,0.3521,0.0028,110
kr17h,disp_pc,0.3498,0.0027,110
kr17h,disp_oecdm,0.3459,0.0029,110
kr17h,disp_ae,0.3447,0.0028,110
kr17h,con_hh,0.3544,0.0031,110
kr17h,con_sqrt,0.2769,0.003,110
kr17h,con_pc,0.2732,0.0024,110
kr17h,con_oecdm,0.2708,0.0025,110
kr17h,con_ae,0.2682,0.0027,110
[1] "Loading dataset kr18h..."
kr18h,market_hh,0.4778,0.0034,110
kr18h,market_sqrt,0.3984,0.0036,110
kr18h,market_pc,0.3944,0.0034,110
kr18h,market_oecdm,0.3929,0.0032,110
kr18h,market_ae,0.3911,0.003,110
kr18h,gross_hh,0.4343,0.0032,110
kr18h,gross_sqrt,0.3626,0.0035,110
kr18h,gross_pc,0.356,0.0029,110
kr18h,gross_oecdm,0.3558,0.0032,110
kr18h,gross_ae,0.3532,0.0028,110
kr18h,disp_hh,0.4151,0.0026,110
kr18h,disp_sqrt,0.3425,0.0029,110
kr18h,disp_pc,0.3382,0.0025,110
kr18h,disp_oecdm,0.3358,0.0033,110
kr18h,disp_ae,0.3338,0.0026,110
kr18h,con_hh,0.35,0.0018,110
kr18h,con_sqrt,0.2681,0.0019,110
kr18h,con_pc,0.2635,0.0019,110
kr18h,con_oecdm,0.2616,0.0018,110
kr18h,con_ae,0.2585,0.0018,110
[1] "Loading dataset kr19h..."
kr19h,market_hh,0.4825,0.0042,110
kr19h,market_sqrt,0.4005,0.0054,110
kr19h,market_pc,0.3959,0.0047,110
kr19h,market_oecdm,0.3956,0.0053,110
kr19h,market_ae,0.3934,0.0055,110
kr19h,gross_hh,0.432,0.0042,110
kr19h,gross_sqrt,0.3576,0.0053,110
kr19h,gross_pc,0.3503,0.0043,110
kr19h,gross_oecdm,0.3515,0.0053,110
kr19h,gross_ae,0.3483,0.0045,110
kr19h,disp_hh,0.4124,0.0041,110
kr19h,disp_sqrt,0.3374,0.0051,110
kr19h,disp_pc,0.3327,0.0043,110
kr19h,disp_oecdm,0.3314,0.0044,110
kr19h,disp_ae,0.3289,0.0046,110
kr19h,con_hh,0.3483,0.002,110
kr19h,con_sqrt,0.2635,0.0019,110
kr19h,con_pc,0.256,0.0017,110
kr19h,con_oecdm,0.2562,0.0018,110
kr19h,con_ae,0.252,0.0017,110
[1] "Loading dataset kr20h..."
kr20h,market_hh,0.4807,0.005,110
kr20h,market_sqrt,0.4014,0.0054,110
kr20h,market_pc,0.3988,0.0042,110
kr20h,market_oecdm,0.3964,0.0051,110
kr20h,market_ae,0.3949,0.0049,110
kr20h,gross_hh,0.423,0.0038,110
kr20h,gross_sqrt,0.3505,0.0047,110
kr20h,gross_pc,0.345,0.0043,110
kr20h,gross_oecdm,0.3441,0.0048,110
kr20h,gross_ae,0.3415,0.0043,110
kr20h,disp_hh,0.4034,0.0047,110
kr20h,disp_sqrt,0.3304,0.0049,110
kr20h,disp_pc,0.3277,0.004,110
kr20h,disp_oecdm,0.3242,0.0041,110
kr20h,disp_ae,0.3223,0.0042,110
kr20h,con_hh,0.3367,0.0021,110
kr20h,con_sqrt,0.253,0.002,110
kr20h,con_pc,0.2474,0.002,110
kr20h,con_oecdm,0.2461,0.0019,110
kr20h,con_ae,0.2423,0.0018,110
[1] "Loading dataset kr21h..."
kr21h,market_hh,0.4807,0.0035,110
kr21h,market_sqrt,0.4017,0.0039,110
kr21h,market_pc,0.4007,0.0033,110
kr21h,market_oecdm,0.3973,0.0034,110
kr21h,market_ae,0.3962,0.0036,110
kr21h,gross_hh,0.426,0.0028,110
kr21h,gross_sqrt,0.3524,0.0038,110
kr21h,gross_pc,0.3483,0.0031,110
kr21h,gross_oecdm,0.3466,0.0038,110
kr21h,gross_ae,0.3443,0.0032,110
kr21h,disp_hh,0.4062,0.0026,110
kr21h,disp_sqrt,0.3315,0.0028,110
kr21h,disp_pc,0.33,0.0026,110
kr21h,disp_oecdm,0.3257,0.0029,110
kr21h,disp_ae,0.3241,0.0028,110
kr21h,con_hh,0.3378,0.0019,110
kr21h,con_sqrt,0.2533,0.0018,110
kr21h,con_pc,0.2506,0.0017,110
kr21h,con_oecdm,0.2472,0.0018,110
kr21h,con_ae,0.2441,0.0018,110
> 
> proc.time()
   user  system elapsed 
140.369   0.463 145.004 


