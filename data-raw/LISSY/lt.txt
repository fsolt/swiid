From: <postbox@lisdatacenter.org>
Subject: job 1362410 lt
Date: June 20, 2025 at 10:36:32 AM CDT
To: <fsolt@mac.com>

############################### NOTICE TO USERS ###############################
                                                                        Use of the data in the LUXEMBOURG INCOME STUDY DATABASES is governed by regulations which do not allow copying or further distribution of the survey microdata.                                                     

Anyone violating these regulations will lose all privileges to the databases and may be subject to prosecution under the law. In addition, any attempt to circumvent the LIS processing system or unauthorized entry into the LIS computing system will result in prosecution.             
All papers written using the LUXEMBOURG INCOME STUDY DATABASES must be  submitted for entry into the Working Papers Series. Users of the LIS or LWS microdata are required to cite the data source in their list of references.                   

Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> 
> 
> 
> 
> 
> 
> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> 
> 
> options(error = expression(q('no')))
> ## Define functions 
> gini <- function(df, x) { 
+   df1 <- df[!is.na(df[[x]]), ] 
+   x <- as.vector(df1[[x]]) 
+   weight <- df1$wt 
+    
+   ox <- order(x) 
+   x <- as.vector(x)[ox] 
+   weight <- as.vector(weight)[ox] / sum(weight)  
+   p <- cumsum(weight) 
+   nu <- cumsum(weight * x) 
+   n <- length(nu) 
+   nu <- nu / nu[n] 
+   res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+   return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+   x <- var[order(var)] 
+   y <- wgt[order(var)] 
+   z <- cumsum(y) / sum(y) 
+   cop <- rep(NA, length(split))  
+   for (i in 1:length(cop)) { 
+     cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+   } 
+   return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+   tb <- ifelse(var < botline, botline, var) 
+   tb <- ifelse(tb > topline, topline, tb) 
+   return(tb) 
+ } 
>  
> setups <- function(df) { 
+   botline <- 0 
+   topline <- exp(log(wNtile(df$dhi, df$hpopwgt, 0.75)) + 3 * (log(wNtile(df$dhi, df$hpopwgt, 0.75)) - log(wNtile(df$dhi, df$hpopwgt, 0.25)))) 
+   df$oecdm <- 1 + .5 * (df$nhhmem - df$nhhmem13 - 1) + .3 * df$nhhmem13 
+   df$ae <- 1 + .7 * (df$nhhmem - df$nhhmem13 - 1) + .5 * df$nhhmem13 
+    
+   df$disp_hh <- topBottom(df$dhi, botline, topline) 
+   df$disp_sqrt <- df$disp_hh / (df$nhhmem ^ 0.5) 
+   df$disp_pc <- df$disp_hh / df$nhhmem 
+   df$disp_oecdm <- df$disp_hh / df$oecdm 
+   df$disp_ae <- df$disp_hh / df$ae 
+    
+   df$gross_hh <- topBottom(df$hitotal, botline, topline) 
+   df$gross_sqrt <- df$gross_hh / (df$nhhmem ^ 0.5) 
+   df$gross_pc <- df$gross_hh / df$nhhmem 
+   df$gross_oecdm <- df$gross_hh / df$oecdm 
+   df$gross_ae <- df$gross_hh / df$ae 
+    
+   df$market_hh <- topBottom(ifelse(!is.na(df$hiprivate), (df$hifactor + df$hiprivate), df$hifactor), botline, topline) 
+   df$market_sqrt <- df$market_hh / (df$nhhmem ^ 0.5) 
+   df$market_pc <- df$market_hh / df$nhhmem 
+   df$market_oecdm <- df$market_hh / df$oecdm 
+   df$market_ae <- df$market_hh / df$ae 
+    
+   df$con_hh <- topBottom(df$hcexp, botline, topline) 
+   df$con_sqrt <- df$con_hh / (df$nhhmem ^ 0.5) 
+   df$con_pc <- df$con_hh / df$nhhmem 
+   df$con_oecdm <- df$con_hh / df$oecdm 
+   df$con_ae <- df$con_hh / df$ae 
+    
+   return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+   data <- data[!is.na(data[[var]]), ] 
+   resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+   r_stat <- lapply(resamples, function(x) gini(x, var)) 
+   std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+   return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(list(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+   set.seed(324) 
+   ccs <- c("au", "at", "be", "br", "ca", "ci", "cl", "cn", "co", "cz", "dk",  
+            "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is", "in", 
+            "ie", "il", "it", "jp", "lt", "lu", "ml", "mx", "nl", "no", "pa", "py",  
+            "pe", "pl", "ps", "ro", "ru", "rs", "sk", "si", "za", "kr", "es", "se",  
+            "ch", "tw", "uk", "us", "uy", "vn", 
+            "iq", "jo", "ps", "so", "sd", "tn")  
+   cc <- tolower(cc) 
+   if (!cc %in% ccs) { 
+     stop("Please specify a LIS country in iso2c format") 
+   } 
+   last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+   yy <- as.character(c(c(63:99), paste0("0", 0:9), c(10:last_year_yy))) 
+  
+   datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+   vars <- c("dhi", "hitotal", "hifactor", "hiprivate", "hcexp", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+  
+   v <- c("market_hh", "market_sqrt", "market_pc", "market_oecdm", "market_ae", 
+          "gross_hh", "gross_sqrt", "gross_pc", "gross_oecdm", "gross_ae", 
+          "disp_hh", "disp_sqrt", "disp_pc", "disp_oecdm", "disp_ae", 
+          "con_hh", "con_sqrt", "con_pc", "con_oecdm", "con_ae") 
+    
+   for (ccyy in datasets) { 
+     cat("") 
+     df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+     if (!class(df)[1] == "try-error") { 
+       mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+       if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+         df <- setups(df) 
+         for (var in v) { 
+           if (grepl("hh", var)) { 
+             df$wt <- df$hpopwgt 
+           } else { 
+             df$wt <- df$hpopwgt * df$nhhmem 
+           } 
+           if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+             cat(paste(ccyy,  
+                       var,  
+                       gini(df, var), 
+                       boot_gini_se(df, var, reps = reps), 
+                       df$grossnet[1], 
+                       sep = ","), sep = "\n") 
+           } 
+         } 
+       } 
+     } 
+   } 
+ } 
>  
> # Call 
> get_ginis("lt") 
[1] "Loading dataset lt09h..."
lt09h,market_hh,0.6081,0.008,110
lt09h,market_sqrt,0.5247,0.0082,110
lt09h,market_pc,0.5368,0.008,110
lt09h,market_oecdm,0.5254,0.0081,110
lt09h,market_ae,0.5285,0.0068,110
lt09h,gross_hh,0.4511,0.0071,110
lt09h,gross_sqrt,0.3833,0.0077,110
lt09h,gross_pc,0.3813,0.0078,110
lt09h,gross_oecdm,0.3804,0.0085,110
lt09h,gross_ae,0.378,0.0076,110
lt09h,disp_hh,0.4266,0.0063,110
lt09h,disp_sqrt,0.3622,0.0075,110
lt09h,disp_pc,0.3645,0.0061,110
lt09h,disp_oecdm,0.3593,0.0068,110
lt09h,disp_ae,0.3581,0.0074,110
lt09h,con_hh,NaN,NA,110
lt09h,con_sqrt,NaN,NA,110
lt09h,con_pc,NaN,NA,110
lt09h,con_oecdm,NaN,NA,110
lt09h,con_ae,NaN,NA,110
[1] "Loading dataset lt10h..."
lt10h,market_hh,0.6234,0.0067,110
lt10h,market_sqrt,0.5298,0.0068,110
lt10h,market_pc,0.5466,0.0065,110
lt10h,market_oecdm,0.5318,0.0074,110
lt10h,market_ae,0.5362,0.0069,110
lt10h,gross_hh,0.4339,0.0048,110
lt10h,gross_sqrt,0.3573,0.0045,110
lt10h,gross_pc,0.3549,0.0056,110
lt10h,gross_oecdm,0.3523,0.0054,110
lt10h,gross_ae,0.3498,0.0052,110
lt10h,disp_hh,0.4022,0.0047,110
lt10h,disp_sqrt,0.3268,0.0051,110
lt10h,disp_pc,0.3296,0.006,110
lt10h,disp_oecdm,0.3214,0.0049,110
lt10h,disp_ae,0.3205,0.0054,110
lt10h,con_hh,NaN,NA,110
lt10h,con_sqrt,NaN,NA,110
lt10h,con_pc,NaN,NA,110
lt10h,con_oecdm,NaN,NA,110
lt10h,con_ae,NaN,NA,110
[1] "Loading dataset lt11h..."
lt11h,market_hh,0.603,0.007,110
lt11h,market_sqrt,0.5093,0.0063,110
lt11h,market_pc,0.5263,0.0077,110
lt11h,market_oecdm,0.51,0.0063,110
lt11h,market_ae,0.5148,0.0075,110
lt11h,gross_hh,0.4277,0.0046,110
lt11h,gross_sqrt,0.348,0.0048,110
lt11h,gross_pc,0.3455,0.0055,110
lt11h,gross_oecdm,0.3424,0.0049,110
lt11h,gross_ae,0.34,0.0045,110
lt11h,disp_hh,0.3998,0.005,110
lt11h,disp_sqrt,0.3206,0.0047,110
lt11h,disp_pc,0.3208,0.0044,110
lt11h,disp_oecdm,0.3145,0.0052,110
lt11h,disp_ae,0.3127,0.0046,110
lt11h,con_hh,NaN,NA,110
lt11h,con_sqrt,NaN,NA,110
lt11h,con_pc,NaN,NA,110
lt11h,con_oecdm,NaN,NA,110
lt11h,con_ae,NaN,NA,110
[1] "Loading dataset lt12h..."
lt12h,market_hh,0.6144,0.0072,110
lt12h,market_sqrt,0.5275,0.0074,110
lt12h,market_pc,0.5393,0.0075,110
lt12h,market_oecdm,0.5259,0.007,110
lt12h,market_ae,0.5292,0.0073,110
lt12h,gross_hh,0.4421,0.0056,110
lt12h,gross_sqrt,0.3694,0.0068,110
lt12h,gross_pc,0.3653,0.0067,110
lt12h,gross_oecdm,0.3627,0.0071,110
lt12h,gross_ae,0.3601,0.0074,110
lt12h,disp_hh,0.4173,0.0071,110
lt12h,disp_sqrt,0.3457,0.0062,110
lt12h,disp_pc,0.3442,0.0063,110
lt12h,disp_oecdm,0.3385,0.0071,110
lt12h,disp_ae,0.3366,0.0077,110
lt12h,con_hh,NaN,NA,110
lt12h,con_sqrt,NaN,NA,110
lt12h,con_pc,NaN,NA,110
lt12h,con_oecdm,NaN,NA,110
lt12h,con_ae,NaN,NA,110
[1] "Loading dataset lt13h..."
lt13h,market_hh,0.6028,0.0074,110
lt13h,market_sqrt,0.5101,0.0065,110
lt13h,market_pc,0.5257,0.0077,110
lt13h,market_oecdm,0.5118,0.0076,110
lt13h,market_ae,0.5157,0.0067,110
lt13h,gross_hh,0.4479,0.0052,110
lt13h,gross_sqrt,0.3707,0.0048,110
lt13h,gross_pc,0.3682,0.0054,110
lt13h,gross_oecdm,0.3667,0.0052,110
lt13h,gross_ae,0.3641,0.0061,110
lt13h,disp_hh,0.4254,0.0064,110
lt13h,disp_sqrt,0.3496,0.0067,110
lt13h,disp_pc,0.3486,0.0062,110
lt13h,disp_oecdm,0.3449,0.0057,110
lt13h,disp_ae,0.3426,0.0062,110
lt13h,con_hh,NaN,NA,110
lt13h,con_sqrt,NaN,NA,110
lt13h,con_pc,NaN,NA,110
lt13h,con_oecdm,NaN,NA,110
lt13h,con_ae,NaN,NA,110
[1] "Loading dataset lt14h..."
lt14h,market_hh,0.6236,0.0104,110
lt14h,market_sqrt,0.5307,0.0137,110
lt14h,market_pc,0.5426,0.0122,110
lt14h,market_oecdm,0.5334,0.0151,110
lt14h,market_ae,0.5354,0.0136,110
lt14h,gross_hh,0.477,0.0116,110
lt14h,gross_sqrt,0.3982,0.0151,110
lt14h,gross_pc,0.3916,0.0112,110
lt14h,gross_oecdm,0.3961,0.0149,110
lt14h,gross_ae,0.3915,0.0145,110
lt14h,disp_hh,0.4558,0.0101,110
lt14h,disp_sqrt,0.3776,0.0128,110
lt14h,disp_pc,0.3717,0.0107,110
lt14h,disp_oecdm,0.3744,0.0163,110
lt14h,disp_ae,0.37,0.0134,110
lt14h,con_hh,NaN,NA,110
lt14h,con_sqrt,NaN,NA,110
lt14h,con_pc,NaN,NA,110
lt14h,con_oecdm,NaN,NA,110
lt14h,con_ae,NaN,NA,110
[1] "Loading dataset lt15h..."
lt15h,market_hh,0.6024,0.0078,110
lt15h,market_sqrt,0.5144,0.0083,110
lt15h,market_pc,0.5336,0.0084,110
lt15h,market_oecdm,0.516,0.0082,110
lt15h,market_ae,0.5211,0.0075,110
lt15h,gross_hh,0.4642,0.007,110
lt15h,gross_sqrt,0.3869,0.0073,110
lt15h,gross_pc,0.389,0.0069,110
lt15h,gross_oecdm,0.3837,0.0077,110
lt15h,gross_ae,0.3827,0.0073,110
lt15h,disp_hh,0.4452,0.0071,110
lt15h,disp_sqrt,0.3688,0.0065,110
lt15h,disp_pc,0.3706,0.0071,110
lt15h,disp_oecdm,0.3645,0.0068,110
lt15h,disp_ae,0.3634,0.0075,110
lt15h,con_hh,NaN,NA,110
lt15h,con_sqrt,NaN,NA,110
lt15h,con_pc,NaN,NA,110
lt15h,con_oecdm,NaN,NA,110
lt15h,con_ae,NaN,NA,110
[1] "Loading dataset lt16h..."
lt16h,market_hh,0.6032,0.0084,110
lt16h,market_sqrt,0.514,0.0085,110
lt16h,market_pc,0.5327,0.0094,110
lt16h,market_oecdm,0.5144,0.008,110
lt16h,market_ae,0.5196,0.0088,110
lt16h,gross_hh,0.4717,0.0071,110
lt16h,gross_sqrt,0.3937,0.0075,110
lt16h,gross_pc,0.3966,0.0087,110
lt16h,gross_oecdm,0.3895,0.0077,110
lt16h,gross_ae,0.3891,0.0087,110
lt16h,disp_hh,0.4523,0.0062,110
lt16h,disp_sqrt,0.3748,0.0085,110
lt16h,disp_pc,0.3787,0.0088,110
lt16h,disp_oecdm,0.37,0.0071,110
lt16h,disp_ae,0.3699,0.0076,110
lt16h,con_hh,NaN,NA,110
lt16h,con_sqrt,NaN,NA,110
lt16h,con_pc,NaN,NA,110
lt16h,con_oecdm,NaN,NA,110
lt16h,con_ae,NaN,NA,110
[1] "Loading dataset lt17h..."
lt17h,market_hh,0.5976,0.0072,110
lt17h,market_sqrt,0.5098,0.0076,110
lt17h,market_pc,0.5246,0.0085,110
lt17h,market_oecdm,0.5096,0.0074,110
lt17h,market_ae,0.5132,0.0075,110
lt17h,gross_hh,0.4705,0.0067,110
lt17h,gross_sqrt,0.3917,0.0052,110
lt17h,gross_pc,0.3899,0.0074,110
lt17h,gross_oecdm,0.3869,0.0062,110
lt17h,gross_ae,0.3848,0.007,110
lt17h,disp_hh,0.4503,0.0065,110
lt17h,disp_sqrt,0.3709,0.006,110
lt17h,disp_pc,0.3691,0.0068,110
lt17h,disp_oecdm,0.3652,0.0066,110
lt17h,disp_ae,0.363,0.0076,110
lt17h,con_hh,NaN,NA,110
lt17h,con_sqrt,NaN,NA,110
lt17h,con_pc,NaN,NA,110
lt17h,con_oecdm,NaN,NA,110
lt17h,con_ae,NaN,NA,110
[1] "Loading dataset lt18h..."
lt18h,market_hh,0.5929,0.0066,110
lt18h,market_sqrt,0.5035,0.0071,110
lt18h,market_pc,0.5139,0.0071,110
lt18h,market_oecdm,0.5009,0.0056,110
lt18h,market_ae,0.5036,0.0073,110
lt18h,gross_hh,0.4612,0.0056,110
lt18h,gross_sqrt,0.3798,0.0055,110
lt18h,gross_pc,0.3744,0.006,110
lt18h,gross_oecdm,0.3725,0.0053,110
lt18h,gross_ae,0.3696,0.0056,110
lt18h,disp_hh,0.4394,0.0053,110
lt18h,disp_sqrt,0.3591,0.0055,110
lt18h,disp_pc,0.3544,0.0062,110
lt18h,disp_oecdm,0.3509,0.0059,110
lt18h,disp_ae,0.3482,0.0055,110
lt18h,con_hh,NaN,NA,110
lt18h,con_sqrt,NaN,NA,110
lt18h,con_pc,NaN,NA,110
lt18h,con_oecdm,NaN,NA,110
lt18h,con_ae,NaN,NA,110
[1] "Loading dataset lt19h..."
lt19h,market_hh,0.583,0.0067,110
lt19h,market_sqrt,0.4958,0.0076,110
lt19h,market_pc,0.508,0.0069,110
lt19h,market_oecdm,0.4944,0.0074,110
lt19h,market_ae,0.4973,0.0074,110
lt19h,gross_hh,0.4698,0.0055,110
lt19h,gross_sqrt,0.3892,0.007,110
lt19h,gross_pc,0.3855,0.0066,110
lt19h,gross_oecdm,0.3837,0.0066,110
lt19h,gross_ae,0.3811,0.0064,110
lt19h,disp_hh,0.4335,0.0058,110
lt19h,disp_sqrt,0.3544,0.0071,110
lt19h,disp_pc,0.3501,0.0069,110
lt19h,disp_oecdm,0.3473,0.0059,110
lt19h,disp_ae,0.3442,0.0064,110
lt19h,con_hh,NaN,NA,110
lt19h,con_sqrt,NaN,NA,110
lt19h,con_pc,NaN,NA,110
lt19h,con_oecdm,NaN,NA,110
lt19h,con_ae,NaN,NA,110
[1] "Loading dataset lt20h..."
lt20h,market_hh,0.5889,0.0062,110
lt20h,market_sqrt,0.5072,0.0073,110
lt20h,market_pc,0.5256,0.008,110
lt20h,market_oecdm,0.5086,0.0077,110
lt20h,market_ae,0.5131,0.0075,110
lt20h,gross_hh,0.4706,0.0061,110
lt20h,gross_sqrt,0.3921,0.0063,110
lt20h,gross_pc,0.3939,0.0065,110
lt20h,gross_oecdm,0.3898,0.0055,110
lt20h,gross_ae,0.3884,0.0069,110
lt20h,disp_hh,0.4337,0.0056,110
lt20h,disp_sqrt,0.3565,0.0065,110
lt20h,disp_pc,0.3586,0.0066,110
lt20h,disp_oecdm,0.3527,0.0069,110
lt20h,disp_ae,0.3511,0.0071,110
lt20h,con_hh,NaN,NA,110
lt20h,con_sqrt,NaN,NA,110
lt20h,con_pc,NaN,NA,110
lt20h,con_oecdm,NaN,NA,110
lt20h,con_ae,NaN,NA,110
[1] "Loading dataset lt21h..."
lt21h,market_hh,0.5966,0.0069,110
lt21h,market_sqrt,0.5178,0.0068,110
lt21h,market_pc,0.533,0.008,110
lt21h,market_oecdm,0.5176,0.0069,110
lt21h,market_ae,0.5211,0.0079,110
lt21h,gross_hh,0.48,0.0055,110
lt21h,gross_sqrt,0.4038,0.0064,110
lt21h,gross_pc,0.4036,0.0063,110
lt21h,gross_oecdm,0.4003,0.0066,110
lt21h,gross_ae,0.3982,0.007,110
lt21h,disp_hh,0.4421,0.0059,110
lt21h,disp_sqrt,0.3665,0.0071,110
lt21h,disp_pc,0.3666,0.0065,110
lt21h,disp_oecdm,0.3618,0.0067,110
lt21h,disp_ae,0.3594,0.0073,110
lt21h,con_hh,NaN,NA,110
lt21h,con_sqrt,NaN,NA,110
lt21h,con_pc,NaN,NA,110
lt21h,con_oecdm,NaN,NA,110
lt21h,con_ae,NaN,NA,110
> 
> proc.time()
   user  system elapsed 
103.675   0.312 105.703 


