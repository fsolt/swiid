From: <postbox@lisdatacenter.org>
Subject: job 1362430 sk
Date: June 20, 2025 at 11:00:25 AM CDT
To: <fsolt@mac.com>

############################### NOTICE TO USERS ###############################
                                                                        Use of the data in the LUXEMBOURG INCOME STUDY DATABASES is governed by regulations which do not allow copying or further distribution of the survey microdata.                                                     

Anyone violating these regulations will lose all privileges to the databases and may be subject to prosecution under the law. In addition, any attempt to circumvent the LIS processing system or unauthorized entry into the LIS computing system will result in prosecution.             
All papers written using the LUXEMBOURG INCOME STUDY DATABASES must be  submitted for entry into the Working Papers Series. Users of the LIS or LWS microdata are required to cite the data source in their list of references.                   

Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> 
> 
> 
> 
> 
> 
> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> 
> 
> options(error = expression(q('no')))
> ## Define functions 
> gini <- function(df, x) { 
+   df1 <- df[!is.na(df[[x]]), ] 
+   x <- as.vector(df1[[x]]) 
+   weight <- df1$wt 
+    
+   ox <- order(x) 
+   x <- as.vector(x)[ox] 
+   weight <- as.vector(weight)[ox] / sum(weight)  
+   p <- cumsum(weight) 
+   nu <- cumsum(weight * x) 
+   n <- length(nu) 
+   nu <- nu / nu[n] 
+   res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+   return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+   x <- var[order(var)] 
+   y <- wgt[order(var)] 
+   z <- cumsum(y) / sum(y) 
+   cop <- rep(NA, length(split))  
+   for (i in 1:length(cop)) { 
+     cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+   } 
+   return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+   tb <- ifelse(var < botline, botline, var) 
+   tb <- ifelse(tb > topline, topline, tb) 
+   return(tb) 
+ } 
>  
> setups <- function(df) { 
+   botline <- 0 
+   topline <- exp(log(wNtile(df$dhi, df$hpopwgt, 0.75)) + 3 * (log(wNtile(df$dhi, df$hpopwgt, 0.75)) - log(wNtile(df$dhi, df$hpopwgt, 0.25)))) 
+   df$oecdm <- 1 + .5 * (df$nhhmem - df$nhhmem13 - 1) + .3 * df$nhhmem13 
+   df$ae <- 1 + .7 * (df$nhhmem - df$nhhmem13 - 1) + .5 * df$nhhmem13 
+    
+   df$disp_hh <- topBottom(df$dhi, botline, topline) 
+   df$disp_sqrt <- df$disp_hh / (df$nhhmem ^ 0.5) 
+   df$disp_pc <- df$disp_hh / df$nhhmem 
+   df$disp_oecdm <- df$disp_hh / df$oecdm 
+   df$disp_ae <- df$disp_hh / df$ae 
+    
+   df$gross_hh <- topBottom(df$hitotal, botline, topline) 
+   df$gross_sqrt <- df$gross_hh / (df$nhhmem ^ 0.5) 
+   df$gross_pc <- df$gross_hh / df$nhhmem 
+   df$gross_oecdm <- df$gross_hh / df$oecdm 
+   df$gross_ae <- df$gross_hh / df$ae 
+    
+   df$market_hh <- topBottom(ifelse(!is.na(df$hiprivate), (df$hifactor + df$hiprivate), df$hifactor), botline, topline) 
+   df$market_sqrt <- df$market_hh / (df$nhhmem ^ 0.5) 
+   df$market_pc <- df$market_hh / df$nhhmem 
+   df$market_oecdm <- df$market_hh / df$oecdm 
+   df$market_ae <- df$market_hh / df$ae 
+    
+   df$con_hh <- topBottom(df$hcexp, botline, topline) 
+   df$con_sqrt <- df$con_hh / (df$nhhmem ^ 0.5) 
+   df$con_pc <- df$con_hh / df$nhhmem 
+   df$con_oecdm <- df$con_hh / df$oecdm 
+   df$con_ae <- df$con_hh / df$ae 
+    
+   return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+   data <- data[!is.na(data[[var]]), ] 
+   resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+   r_stat <- lapply(resamples, function(x) gini(x, var)) 
+   std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+   return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(list(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+   set.seed(324) 
+   ccs <- c("au", "at", "be", "br", "ca", "ci", "cl", "cn", "co", "cz", "dk",  
+            "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is", "in", 
+            "ie", "il", "it", "jp", "lt", "lu", "ml", "mx", "nl", "no", "pa", "py",  
+            "pe", "pl", "ps", "ro", "ru", "rs", "sk", "si", "za", "kr", "es", "se",  
+            "ch", "tw", "uk", "us", "uy", "vn", 
+            "iq", "jo", "ps", "so", "sd", "tn")  
+   cc <- tolower(cc) 
+   if (!cc %in% ccs) { 
+     stop("Please specify a LIS country in iso2c format") 
+   } 
+   last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+   yy <- as.character(c(c(63:99), paste0("0", 0:9), c(10:last_year_yy))) 
+  
+   datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+   vars <- c("dhi", "hitotal", "hifactor", "hiprivate", "hcexp", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+  
+   v <- c("market_hh", "market_sqrt", "market_pc", "market_oecdm", "market_ae", 
+          "gross_hh", "gross_sqrt", "gross_pc", "gross_oecdm", "gross_ae", 
+          "disp_hh", "disp_sqrt", "disp_pc", "disp_oecdm", "disp_ae", 
+          "con_hh", "con_sqrt", "con_pc", "con_oecdm", "con_ae") 
+    
+   for (ccyy in datasets) { 
+     cat("") 
+     df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+     if (!class(df)[1] == "try-error") { 
+       mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+       if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+         df <- setups(df) 
+         for (var in v) { 
+           if (grepl("hh", var)) { 
+             df$wt <- df$hpopwgt 
+           } else { 
+             df$wt <- df$hpopwgt * df$nhhmem 
+           } 
+           if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+             cat(paste(ccyy,  
+                       var,  
+                       gini(df, var), 
+                       boot_gini_se(df, var, reps = reps), 
+                       df$grossnet[1], 
+                       sep = ","), sep = "\n") 
+           } 
+         } 
+       } 
+     } 
+   } 
+ } 
>  
> # Call 
> get_ginis("sk") 
[1] "Loading dataset sk92h..."
sk92h,market_hh,0.4997,0.0027,300
sk92h,market_sqrt,0.4012,0.0029,300
sk92h,market_pc,0.4264,0.0029,300
sk92h,market_oecdm,0.4,0.0031,300
sk92h,market_ae,0.4078,0.0028,300
sk92h,gross_hh,0.307,0.0019,300
sk92h,gross_sqrt,0.2147,0.0022,300
sk92h,gross_pc,0.222,0.0018,300
sk92h,gross_oecdm,0.2045,0.0019,300
sk92h,gross_ae,0.2049,0.002,300
sk92h,disp_hh,0.2847,0.0022,300
sk92h,disp_sqrt,0.1892,0.0018,300
sk92h,disp_pc,0.2017,0.0019,300
sk92h,disp_oecdm,0.1782,0.0017,300
sk92h,disp_ae,0.1797,0.0017,300
sk92h,con_hh,NaN,NA,300
sk92h,con_sqrt,NaN,NA,300
sk92h,con_pc,NaN,NA,300
sk92h,con_oecdm,NaN,NA,300
sk92h,con_ae,NaN,NA,300
[1] "Loading dataset sk96h..."
sk96h,market_hh,0.5179,0.005,200
sk96h,market_sqrt,0.4327,0.0045,200
sk96h,market_pc,0.4548,0.0047,200
sk96h,gross_hh,0.3224,0.0037,200
sk96h,gross_sqrt,0.2498,0.0038,200
sk96h,gross_pc,0.2628,0.004,200
sk96h,disp_hh,0.3224,0.0035,200
sk96h,disp_sqrt,0.2498,0.0044,200
sk96h,disp_pc,0.2628,0.0044,200
sk96h,con_hh,NaN,NA,200
sk96h,con_sqrt,NaN,NA,200
sk96h,con_pc,NaN,NA,200
[1] "Loading dataset sk04h..."
sk04h,market_hh,0.5653,0.0055,110
sk04h,market_sqrt,0.4532,0.0064,110
sk04h,market_pc,0.4701,0.0063,110
sk04h,market_oecdm,0.4538,0.0063,110
sk04h,market_ae,0.4589,0.0056,110
sk04h,gross_hh,0.3877,0.0048,110
sk04h,gross_sqrt,0.3013,0.0054,110
sk04h,gross_pc,0.2968,0.0057,110
sk04h,gross_oecdm,0.2932,0.0049,110
sk04h,gross_ae,0.291,0.0058,110
sk04h,disp_hh,0.3542,0.0045,110
sk04h,disp_sqrt,0.2692,0.0045,110
sk04h,disp_pc,0.2712,0.0046,110
sk04h,disp_oecdm,0.2611,0.0057,110
sk04h,disp_ae,0.2606,0.0047,110
sk04h,con_hh,NaN,NA,110
sk04h,con_sqrt,NaN,NA,110
sk04h,con_pc,NaN,NA,110
sk04h,con_oecdm,NaN,NA,110
sk04h,con_ae,NaN,NA,110
[1] "Loading dataset sk07h..."
sk07h,market_hh,0.5291,0.0053,110
sk07h,market_sqrt,0.4138,0.0046,110
sk07h,market_pc,0.4323,0.005,110
sk07h,market_oecdm,0.414,0.0044,110
sk07h,market_ae,0.4196,0.0053,110
sk07h,gross_hh,0.3685,0.0038,110
sk07h,gross_sqrt,0.2763,0.0033,110
sk07h,gross_pc,0.2731,0.0044,110
sk07h,gross_oecdm,0.267,0.0036,110
sk07h,gross_ae,0.2654,0.0038,110
sk07h,disp_hh,0.3412,0.0032,110
sk07h,disp_sqrt,0.2477,0.0034,110
sk07h,disp_pc,0.2473,0.0035,110
sk07h,disp_oecdm,0.2374,0.0038,110
sk07h,disp_ae,0.2365,0.0037,110
sk07h,con_hh,NaN,NA,110
sk07h,con_sqrt,NaN,NA,110
sk07h,con_pc,NaN,NA,110
sk07h,con_oecdm,NaN,NA,110
sk07h,con_ae,NaN,NA,110
[1] "Loading dataset sk10h..."
sk10h,market_hh,0.5335,0.0049,110
sk10h,market_sqrt,0.4306,0.0055,110
sk10h,market_pc,0.4493,0.0047,110
sk10h,market_oecdm,0.4321,0.0054,110
sk10h,market_ae,0.4375,0.0053,110
sk10h,gross_hh,0.3623,0.0046,110
sk10h,gross_sqrt,0.2817,0.0044,110
sk10h,gross_pc,0.2863,0.0058,110
sk10h,gross_oecdm,0.2751,0.0049,110
sk10h,gross_ae,0.2757,0.0045,110
sk10h,disp_hh,0.3435,0.0047,110
sk10h,disp_sqrt,0.2637,0.004,110
sk10h,disp_pc,0.2727,0.0062,110
sk10h,disp_oecdm,0.257,0.0045,110
sk10h,disp_ae,0.2589,0.0044,110
sk10h,con_hh,NaN,NA,110
sk10h,con_sqrt,NaN,NA,110
sk10h,con_pc,NaN,NA,110
sk10h,con_oecdm,NaN,NA,110
sk10h,con_ae,NaN,NA,110
[1] "Loading dataset sk13h..."
sk13h,market_hh,0.5291,0.0057,110
sk13h,market_sqrt,0.4287,0.0064,110
sk13h,market_pc,0.4512,0.006,110
sk13h,market_oecdm,0.4294,0.0063,110
sk13h,market_ae,0.4361,0.006,110
sk13h,gross_hh,0.3681,0.0046,110
sk13h,gross_sqrt,0.29,0.0045,110
sk13h,gross_pc,0.2964,0.0055,110
sk13h,gross_oecdm,0.2823,0.0056,110
sk13h,gross_ae,0.2835,0.0056,110
sk13h,disp_hh,0.3471,0.0046,110
sk13h,disp_sqrt,0.2716,0.005,110
sk13h,disp_pc,0.2833,0.0055,110
sk13h,disp_oecdm,0.2636,0.0051,110
sk13h,disp_ae,0.2664,0.0055,110
sk13h,con_hh,NaN,NA,110
sk13h,con_sqrt,NaN,NA,110
sk13h,con_pc,NaN,NA,110
sk13h,con_oecdm,NaN,NA,110
sk13h,con_ae,NaN,NA,110
[1] "Loading dataset sk14h..."
sk14h,market_hh,0.4974,0.0057,110
sk14h,market_sqrt,0.396,0.0054,110
sk14h,market_pc,0.417,0.006,110
sk14h,market_oecdm,0.3949,0.0056,110
sk14h,market_ae,0.4015,0.0054,110
sk14h,gross_hh,0.3402,0.0039,110
sk14h,gross_sqrt,0.26,0.0036,110
sk14h,gross_pc,0.2663,0.0049,110
sk14h,gross_oecdm,0.2511,0.004,110
sk14h,gross_ae,0.2526,0.0045,110
sk14h,disp_hh,0.3186,0.0036,110
sk14h,disp_sqrt,0.2463,0.0044,110
sk14h,disp_pc,0.2604,0.0045,110
sk14h,disp_oecdm,0.2375,0.004,110
sk14h,disp_ae,0.2415,0.0044,110
sk14h,con_hh,NaN,NA,110
sk14h,con_sqrt,NaN,NA,110
sk14h,con_pc,NaN,NA,110
sk14h,con_oecdm,NaN,NA,110
sk14h,con_ae,NaN,NA,110
[1] "Loading dataset sk15h..."
sk15h,market_hh,0.5023,0.0059,110
sk15h,market_sqrt,0.4008,0.0054,110
sk15h,market_pc,0.4241,0.0069,110
sk15h,market_oecdm,0.4016,0.0059,110
sk15h,market_ae,0.4086,0.0062,110
sk15h,gross_hh,0.3432,0.0042,110
sk15h,gross_sqrt,0.2636,0.0044,110
sk15h,gross_pc,0.2712,0.0047,110
sk15h,gross_oecdm,0.2563,0.0048,110
sk15h,gross_ae,0.2579,0.0042,110
sk15h,disp_hh,0.3225,0.0046,110
sk15h,disp_sqrt,0.25,0.0044,110
sk15h,disp_pc,0.2661,0.005,110
sk15h,disp_oecdm,0.2434,0.0044,110
sk15h,disp_ae,0.2476,0.0045,110
sk15h,con_hh,NaN,NA,110
sk15h,con_sqrt,NaN,NA,110
sk15h,con_pc,NaN,NA,110
sk15h,con_oecdm,NaN,NA,110
sk15h,con_ae,NaN,NA,110
[1] "Loading dataset sk16h..."
sk16h,market_hh,0.4949,0.0062,110
sk16h,market_sqrt,0.3932,0.0055,110
sk16h,market_pc,0.4146,0.0053,110
sk16h,market_oecdm,0.3944,0.0059,110
sk16h,market_ae,0.4005,0.0051,110
sk16h,gross_hh,0.3446,0.0035,110
sk16h,gross_sqrt,0.262,0.0042,110
sk16h,gross_pc,0.2672,0.0048,110
sk16h,gross_oecdm,0.2547,0.0044,110
sk16h,gross_ae,0.2555,0.0055,110
sk16h,disp_hh,0.315,0.0035,110
sk16h,disp_sqrt,0.2332,0.0039,110
sk16h,disp_pc,0.2452,0.0047,110
sk16h,disp_oecdm,0.2253,0.0043,110
sk16h,disp_ae,0.228,0.0041,110
sk16h,con_hh,NaN,NA,110
sk16h,con_sqrt,NaN,NA,110
sk16h,con_pc,NaN,NA,110
sk16h,con_oecdm,NaN,NA,110
sk16h,con_ae,NaN,NA,110
[1] "Loading dataset sk17h..."
sk17h,market_hh,0.4748,0.0056,110
sk17h,market_sqrt,0.3778,0.0054,110
sk17h,market_pc,0.3998,0.0058,110
sk17h,market_oecdm,0.3776,0.004,110
sk17h,market_ae,0.3842,0.0053,110
sk17h,gross_hh,0.3272,0.0034,110
sk17h,gross_sqrt,0.2468,0.0037,110
sk17h,gross_pc,0.2536,0.0035,110
sk17h,gross_oecdm,0.2382,0.0034,110
sk17h,gross_ae,0.24,0.0035,110
sk17h,disp_hh,0.2987,0.003,110
sk17h,disp_sqrt,0.2191,0.0035,110
sk17h,disp_pc,0.2321,0.0039,110
sk17h,disp_oecdm,0.2097,0.0032,110
sk17h,disp_ae,0.2133,0.0031,110
sk17h,con_hh,NaN,NA,110
sk17h,con_sqrt,NaN,NA,110
sk17h,con_pc,NaN,NA,110
sk17h,con_oecdm,NaN,NA,110
sk17h,con_ae,NaN,NA,110
[1] "Loading dataset sk18h..."
sk18h,market_hh,0.4796,0.0058,110
sk18h,market_sqrt,0.3871,0.0052,110
sk18h,market_pc,0.4104,0.0055,110
sk18h,market_oecdm,0.3871,0.0055,110
sk18h,market_ae,0.3942,0.0058,110
sk18h,gross_hh,0.3317,0.0038,110
sk18h,gross_sqrt,0.2566,0.0037,110
sk18h,gross_pc,0.2633,0.0044,110
sk18h,gross_oecdm,0.2484,0.0039,110
sk18h,gross_ae,0.2503,0.0037,110
sk18h,disp_hh,0.3059,0.0029,110
sk18h,disp_sqrt,0.2362,0.0039,110
sk18h,disp_pc,0.2495,0.0034,110
sk18h,disp_oecdm,0.2275,0.0038,110
sk18h,disp_ae,0.2315,0.0043,110
sk18h,con_hh,NaN,NA,110
sk18h,con_sqrt,NaN,NA,110
sk18h,con_pc,NaN,NA,110
sk18h,con_oecdm,NaN,NA,110
sk18h,con_ae,NaN,NA,110
> 
> proc.time()
   user  system elapsed 
 90.909   0.490  94.668 


