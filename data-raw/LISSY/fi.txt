From: <postbox@lisdatacenter.org>
Subject: job 1362391 fi
Date: June 20, 2025 at 10:02:13 AM CDT
To: <fsolt@mac.com>

############################### NOTICE TO USERS ###############################
                                                                        Use of the data in the LUXEMBOURG INCOME STUDY DATABASES is governed by regulations which do not allow copying or further distribution of the survey microdata.                                                     

Anyone violating these regulations will lose all privileges to the databases and may be subject to prosecution under the law. In addition, any attempt to circumvent the LIS processing system or unauthorized entry into the LIS computing system will result in prosecution.             
All papers written using the LUXEMBOURG INCOME STUDY DATABASES must be  submitted for entry into the Working Papers Series. Users of the LIS or LWS microdata are required to cite the data source in their list of references.                   

Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> 
> 
> 
> 
> 
> 
> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> 
> 
> options(error = expression(q('no')))
> ## Define functions 
> gini <- function(df, x) { 
+   df1 <- df[!is.na(df[[x]]), ] 
+   x <- as.vector(df1[[x]]) 
+   weight <- df1$wt 
+    
+   ox <- order(x) 
+   x <- as.vector(x)[ox] 
+   weight <- as.vector(weight)[ox] / sum(weight)  
+   p <- cumsum(weight) 
+   nu <- cumsum(weight * x) 
+   n <- length(nu) 
+   nu <- nu / nu[n] 
+   res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+   return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+   x <- var[order(var)] 
+   y <- wgt[order(var)] 
+   z <- cumsum(y) / sum(y) 
+   cop <- rep(NA, length(split))  
+   for (i in 1:length(cop)) { 
+     cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+   } 
+   return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+   tb <- ifelse(var < botline, botline, var) 
+   tb <- ifelse(tb > topline, topline, tb) 
+   return(tb) 
+ } 
>  
> setups <- function(df) { 
+   botline <- 0 
+   topline <- exp(log(wNtile(df$dhi, df$hpopwgt, 0.75)) + 3 * (log(wNtile(df$dhi, df$hpopwgt, 0.75)) - log(wNtile(df$dhi, df$hpopwgt, 0.25)))) 
+   df$oecdm <- 1 + .5 * (df$nhhmem - df$nhhmem13 - 1) + .3 * df$nhhmem13 
+   df$ae <- 1 + .7 * (df$nhhmem - df$nhhmem13 - 1) + .5 * df$nhhmem13 
+    
+   df$disp_hh <- topBottom(df$dhi, botline, topline) 
+   df$disp_sqrt <- df$disp_hh / (df$nhhmem ^ 0.5) 
+   df$disp_pc <- df$disp_hh / df$nhhmem 
+   df$disp_oecdm <- df$disp_hh / df$oecdm 
+   df$disp_ae <- df$disp_hh / df$ae 
+    
+   df$gross_hh <- topBottom(df$hitotal, botline, topline) 
+   df$gross_sqrt <- df$gross_hh / (df$nhhmem ^ 0.5) 
+   df$gross_pc <- df$gross_hh / df$nhhmem 
+   df$gross_oecdm <- df$gross_hh / df$oecdm 
+   df$gross_ae <- df$gross_hh / df$ae 
+    
+   df$market_hh <- topBottom(ifelse(!is.na(df$hiprivate), (df$hifactor + df$hiprivate), df$hifactor), botline, topline) 
+   df$market_sqrt <- df$market_hh / (df$nhhmem ^ 0.5) 
+   df$market_pc <- df$market_hh / df$nhhmem 
+   df$market_oecdm <- df$market_hh / df$oecdm 
+   df$market_ae <- df$market_hh / df$ae 
+    
+   df$con_hh <- topBottom(df$hcexp, botline, topline) 
+   df$con_sqrt <- df$con_hh / (df$nhhmem ^ 0.5) 
+   df$con_pc <- df$con_hh / df$nhhmem 
+   df$con_oecdm <- df$con_hh / df$oecdm 
+   df$con_ae <- df$con_hh / df$ae 
+    
+   return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+   data <- data[!is.na(data[[var]]), ] 
+   resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+   r_stat <- lapply(resamples, function(x) gini(x, var)) 
+   std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+   return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(list(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+   set.seed(324) 
+   ccs <- c("au", "at", "be", "br", "ca", "ci", "cl", "cn", "co", "cz", "dk",  
+            "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is", "in", 
+            "ie", "il", "it", "jp", "lt", "lu", "ml", "mx", "nl", "no", "pa", "py",  
+            "pe", "pl", "ps", "ro", "ru", "rs", "sk", "si", "za", "kr", "es", "se",  
+            "ch", "tw", "uk", "us", "uy", "vn", 
+            "iq", "jo", "ps", "so", "sd", "tn")  
+   cc <- tolower(cc) 
+   if (!cc %in% ccs) { 
+     stop("Please specify a LIS country in iso2c format") 
+   } 
+   last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+   yy <- as.character(c(c(63:99), paste0("0", 0:9), c(10:last_year_yy))) 
+  
+   datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+   vars <- c("dhi", "hitotal", "hifactor", "hiprivate", "hcexp", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+  
+   v <- c("market_hh", "market_sqrt", "market_pc", "market_oecdm", "market_ae", 
+          "gross_hh", "gross_sqrt", "gross_pc", "gross_oecdm", "gross_ae", 
+          "disp_hh", "disp_sqrt", "disp_pc", "disp_oecdm", "disp_ae", 
+          "con_hh", "con_sqrt", "con_pc", "con_oecdm", "con_ae") 
+    
+   for (ccyy in datasets) { 
+     cat("") 
+     df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+     if (!class(df)[1] == "try-error") { 
+       mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+       if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+         df <- setups(df) 
+         for (var in v) { 
+           if (grepl("hh", var)) { 
+             df$wt <- df$hpopwgt 
+           } else { 
+             df$wt <- df$hpopwgt * df$nhhmem 
+           } 
+           if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+             cat(paste(ccyy,  
+                       var,  
+                       gini(df, var), 
+                       boot_gini_se(df, var, reps = reps), 
+                       df$grossnet[1], 
+                       sep = ","), sep = "\n") 
+           } 
+         } 
+       } 
+     } 
+   } 
+ } 
>  
> # Call 
> get_ginis("fi") 
[1] "Loading dataset fi87h..."
fi87h,market_hh,0.4934,0.0043,110
fi87h,market_sqrt,0.3876,0.0036,110
fi87h,market_pc,0.4109,0.0033,110
fi87h,market_oecdm,0.3853,0.0034,110
fi87h,market_ae,0.39,0.0032,110
fi87h,gross_hh,0.3527,0.0027,110
fi87h,gross_sqrt,0.259,0.002,110
fi87h,gross_pc,0.2715,0.0021,110
fi87h,gross_oecdm,0.2528,0.002,110
fi87h,gross_ae,0.2525,0.002,110
fi87h,disp_hh,0.3116,0.0021,110
fi87h,disp_sqrt,0.207,0.0019,110
fi87h,disp_pc,0.2219,0.0021,110
fi87h,disp_oecdm,0.1997,0.0016,110
fi87h,disp_ae,0.1987,0.002,110
fi87h,con_hh,NaN,NA,110
fi87h,con_sqrt,NaN,NA,110
fi87h,con_pc,NaN,NA,110
fi87h,con_oecdm,NaN,NA,110
fi87h,con_ae,NaN,NA,110
[1] "Loading dataset fi91h..."
fi91h,market_hh,0.509,0.004,110
fi91h,market_sqrt,0.4049,0.0034,110
fi91h,market_pc,0.4297,0.003,110
fi91h,market_oecdm,0.4022,0.0036,110
fi91h,market_ae,0.4073,0.0034,110
fi91h,gross_hh,0.3512,0.0025,110
fi91h,gross_sqrt,0.2571,0.0019,110
fi91h,gross_pc,0.2734,0.0021,110
fi91h,gross_oecdm,0.2516,0.0022,110
fi91h,gross_ae,0.2518,0.002,110
fi91h,disp_hh,0.3137,0.0024,110
fi91h,disp_sqrt,0.2092,0.0015,110
fi91h,disp_pc,0.2292,0.0017,110
fi91h,disp_oecdm,0.2034,0.0017,110
fi91h,disp_ae,0.2034,0.0015,110
fi91h,con_hh,NaN,NA,110
fi91h,con_sqrt,NaN,NA,110
fi91h,con_pc,NaN,NA,110
fi91h,con_oecdm,NaN,NA,110
fi91h,con_ae,NaN,NA,110
[1] "Loading dataset fi95h..."
fi95h,market_hh,0.5738,0.0046,110
fi95h,market_sqrt,0.4779,0.0039,110
fi95h,market_pc,0.5022,0.0043,110
fi95h,market_oecdm,0.4775,0.0044,110
fi95h,market_ae,0.4841,0.0041,110
fi95h,gross_hh,0.3592,0.0029,110
fi95h,gross_sqrt,0.2714,0.003,110
fi95h,gross_pc,0.2848,0.0029,110
fi95h,gross_oecdm,0.2665,0.0032,110
fi95h,gross_ae,0.2675,0.0029,110
fi95h,disp_hh,0.3151,0.0032,110
fi95h,disp_sqrt,0.2172,0.0026,110
fi95h,disp_pc,0.2347,0.0027,110
fi95h,disp_oecdm,0.2113,0.0028,110
fi95h,disp_ae,0.212,0.0027,110
fi95h,con_hh,NaN,NA,110
fi95h,con_sqrt,NaN,NA,110
fi95h,con_pc,NaN,NA,110
fi95h,con_oecdm,NaN,NA,110
fi95h,con_ae,NaN,NA,110
[1] "Loading dataset fi00h..."
fi00h,market_hh,0.5657,0.0048,110
fi00h,market_sqrt,0.4762,0.0054,110
fi00h,market_pc,0.5002,0.0043,110
fi00h,market_oecdm,0.4761,0.0045,110
fi00h,market_ae,0.4823,0.0044,110
fi00h,gross_hh,0.3801,0.0035,110
fi00h,gross_sqrt,0.3002,0.0034,110
fi00h,gross_pc,0.312,0.0032,110
fi00h,gross_oecdm,0.2959,0.0036,110
fi00h,gross_ae,0.2966,0.0033,110
fi00h,disp_hh,0.3405,0.0037,110
fi00h,disp_sqrt,0.2536,0.0029,110
fi00h,disp_pc,0.2691,0.0032,110
fi00h,disp_oecdm,0.2482,0.003,110
fi00h,disp_ae,0.2493,0.0033,110
fi00h,con_hh,NaN,NA,110
fi00h,con_sqrt,NaN,NA,110
fi00h,con_pc,NaN,NA,110
fi00h,con_oecdm,NaN,NA,110
fi00h,con_ae,NaN,NA,110
[1] "Loading dataset fi04h..."
fi04h,market_hh,0.5733,0.0053,110
fi04h,market_sqrt,0.4803,0.0049,110
fi04h,market_pc,0.5041,0.0047,110
fi04h,market_oecdm,0.4805,0.005,110
fi04h,market_ae,0.4866,0.0059,110
fi04h,gross_hh,0.3858,0.0041,110
fi04h,gross_sqrt,0.3047,0.004,110
fi04h,gross_pc,0.3166,0.0042,110
fi04h,gross_oecdm,0.3006,0.0043,110
fi04h,gross_ae,0.3014,0.0039,110
fi04h,disp_hh,0.3497,0.0062,110
fi04h,disp_sqrt,0.2619,0.0054,110
fi04h,disp_pc,0.2781,0.0049,110
fi04h,disp_oecdm,0.257,0.0053,110
fi04h,disp_ae,0.2585,0.0058,110
fi04h,con_hh,NaN,NA,110
fi04h,con_sqrt,NaN,NA,110
fi04h,con_pc,NaN,NA,110
fi04h,con_oecdm,NaN,NA,110
fi04h,con_ae,NaN,NA,110
[1] "Loading dataset fi07h..."
fi07h,market_hh,0.5708,0.0047,110
fi07h,market_sqrt,0.4774,0.0047,110
fi07h,market_pc,0.5005,0.0044,110
fi07h,market_oecdm,0.4767,0.0047,110
fi07h,market_ae,0.4828,0.0049,110
fi07h,gross_hh,0.3873,0.0038,110
fi07h,gross_sqrt,0.3067,0.0038,110
fi07h,gross_pc,0.3187,0.0029,110
fi07h,gross_oecdm,0.3022,0.0034,110
fi07h,gross_ae,0.3032,0.0037,110
fi07h,disp_hh,0.3531,0.0036,110
fi07h,disp_sqrt,0.2666,0.0044,110
fi07h,disp_pc,0.282,0.0035,110
fi07h,disp_oecdm,0.2616,0.0042,110
fi07h,disp_ae,0.2631,0.0045,110
fi07h,con_hh,NaN,NA,110
fi07h,con_sqrt,NaN,NA,110
fi07h,con_pc,NaN,NA,110
fi07h,con_oecdm,NaN,NA,110
fi07h,con_ae,NaN,NA,110
[1] "Loading dataset fi10h..."
fi10h,market_hh,0.5822,0.0046,110
fi10h,market_sqrt,0.4876,0.0044,110
fi10h,market_pc,0.51,0.0052,110
fi10h,market_oecdm,0.487,0.0054,110
fi10h,market_ae,0.4929,0.0052,110
fi10h,gross_hh,0.3849,0.0034,110
fi10h,gross_sqrt,0.3042,0.0035,110
fi10h,gross_pc,0.3142,0.0035,110
fi10h,gross_oecdm,0.2996,0.0037,110
fi10h,gross_ae,0.2999,0.0038,110
fi10h,disp_hh,0.3486,0.0034,110
fi10h,disp_sqrt,0.2634,0.0041,110
fi10h,disp_pc,0.2778,0.0037,110
fi10h,disp_oecdm,0.2584,0.0036,110
fi10h,disp_ae,0.2594,0.0035,110
fi10h,con_hh,NaN,NA,110
fi10h,con_sqrt,NaN,NA,110
fi10h,con_pc,NaN,NA,110
fi10h,con_oecdm,NaN,NA,110
fi10h,con_ae,NaN,NA,110
[1] "Loading dataset fi13h..."
fi13h,market_hh,0.594,0.0049,110
fi13h,market_sqrt,0.4956,0.0043,110
fi13h,market_pc,0.5146,0.0039,110
fi13h,market_oecdm,0.4947,0.0043,110
fi13h,market_ae,0.4993,0.0041,110
fi13h,gross_hh,0.3868,0.0032,110
fi13h,gross_sqrt,0.305,0.0032,110
fi13h,gross_pc,0.3113,0.0032,110
fi13h,gross_oecdm,0.3001,0.0033,110
fi13h,gross_ae,0.2989,0.0031,110
fi13h,disp_hh,0.3474,0.0034,110
fi13h,disp_sqrt,0.2605,0.0032,110
fi13h,disp_pc,0.2718,0.0034,110
fi13h,disp_oecdm,0.2552,0.0029,110
fi13h,disp_ae,0.2549,0.0032,110
fi13h,con_hh,NaN,NA,110
fi13h,con_sqrt,NaN,NA,110
fi13h,con_pc,NaN,NA,110
fi13h,con_oecdm,NaN,NA,110
fi13h,con_ae,NaN,NA,110
[1] "Loading dataset fi16h..."
fi16h,market_hh,0.6035,0.0048,110
fi16h,market_sqrt,0.5074,0.0046,110
fi16h,market_pc,0.5273,0.0044,110
fi16h,market_oecdm,0.5071,0.0048,110
fi16h,market_ae,0.512,0.0048,110
fi16h,gross_hh,0.3885,0.0033,110
fi16h,gross_sqrt,0.3077,0.0034,110
fi16h,gross_pc,0.3153,0.0037,110
fi16h,gross_oecdm,0.303,0.0038,110
fi16h,gross_ae,0.3022,0.0031,110
fi16h,disp_hh,0.3454,0.0031,110
fi16h,disp_sqrt,0.2584,0.0033,110
fi16h,disp_pc,0.2717,0.0033,110
fi16h,disp_oecdm,0.2533,0.0037,110
fi16h,disp_ae,0.2536,0.003,110
fi16h,con_hh,NaN,NA,110
fi16h,con_sqrt,NaN,NA,110
fi16h,con_pc,NaN,NA,110
fi16h,con_oecdm,NaN,NA,110
fi16h,con_ae,NaN,NA,110
> 
> proc.time()
   user  system elapsed 
113.734   0.618 171.067 


