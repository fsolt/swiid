From: <postbox@lisdatacenter.org>
Subject: job 1362383 cl
Date: June 20, 2025 at 9:59:12 AM CDT
To: <fsolt@mac.com>

############################### NOTICE TO USERS ###############################
                                                                        Use of the data in the LUXEMBOURG INCOME STUDY DATABASES is governed by regulations which do not allow copying or further distribution of the survey microdata.                                                     

Anyone violating these regulations will lose all privileges to the databases and may be subject to prosecution under the law. In addition, any attempt to circumvent the LIS processing system or unauthorized entry into the LIS computing system will result in prosecution.             
All papers written using the LUXEMBOURG INCOME STUDY DATABASES must be  submitted for entry into the Working Papers Series. Users of the LIS or LWS microdata are required to cite the data source in their list of references.                   

Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> 
> 
> 
> 
> 
> 
> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> 
> 
> options(error = expression(q('no')))
> ## Define functions 
> gini <- function(df, x) { 
+   df1 <- df[!is.na(df[[x]]), ] 
+   x <- as.vector(df1[[x]]) 
+   weight <- df1$wt 
+    
+   ox <- order(x) 
+   x <- as.vector(x)[ox] 
+   weight <- as.vector(weight)[ox] / sum(weight)  
+   p <- cumsum(weight) 
+   nu <- cumsum(weight * x) 
+   n <- length(nu) 
+   nu <- nu / nu[n] 
+   res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+   return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+   x <- var[order(var)] 
+   y <- wgt[order(var)] 
+   z <- cumsum(y) / sum(y) 
+   cop <- rep(NA, length(split))  
+   for (i in 1:length(cop)) { 
+     cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+   } 
+   return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+   tb <- ifelse(var < botline, botline, var) 
+   tb <- ifelse(tb > topline, topline, tb) 
+   return(tb) 
+ } 
>  
> setups <- function(df) { 
+   botline <- 0 
+   topline <- exp(log(wNtile(df$dhi, df$hpopwgt, 0.75)) + 3 * (log(wNtile(df$dhi, df$hpopwgt, 0.75)) - log(wNtile(df$dhi, df$hpopwgt, 0.25)))) 
+   df$oecdm <- 1 + .5 * (df$nhhmem - df$nhhmem13 - 1) + .3 * df$nhhmem13 
+   df$ae <- 1 + .7 * (df$nhhmem - df$nhhmem13 - 1) + .5 * df$nhhmem13 
+    
+   df$disp_hh <- topBottom(df$dhi, botline, topline) 
+   df$disp_sqrt <- df$disp_hh / (df$nhhmem ^ 0.5) 
+   df$disp_pc <- df$disp_hh / df$nhhmem 
+   df$disp_oecdm <- df$disp_hh / df$oecdm 
+   df$disp_ae <- df$disp_hh / df$ae 
+    
+   df$gross_hh <- topBottom(df$hitotal, botline, topline) 
+   df$gross_sqrt <- df$gross_hh / (df$nhhmem ^ 0.5) 
+   df$gross_pc <- df$gross_hh / df$nhhmem 
+   df$gross_oecdm <- df$gross_hh / df$oecdm 
+   df$gross_ae <- df$gross_hh / df$ae 
+    
+   df$market_hh <- topBottom(ifelse(!is.na(df$hiprivate), (df$hifactor + df$hiprivate), df$hifactor), botline, topline) 
+   df$market_sqrt <- df$market_hh / (df$nhhmem ^ 0.5) 
+   df$market_pc <- df$market_hh / df$nhhmem 
+   df$market_oecdm <- df$market_hh / df$oecdm 
+   df$market_ae <- df$market_hh / df$ae 
+    
+   df$con_hh <- topBottom(df$hcexp, botline, topline) 
+   df$con_sqrt <- df$con_hh / (df$nhhmem ^ 0.5) 
+   df$con_pc <- df$con_hh / df$nhhmem 
+   df$con_oecdm <- df$con_hh / df$oecdm 
+   df$con_ae <- df$con_hh / df$ae 
+    
+   return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+   data <- data[!is.na(data[[var]]), ] 
+   resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+   r_stat <- lapply(resamples, function(x) gini(x, var)) 
+   std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+   return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(list(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+   set.seed(324) 
+   ccs <- c("au", "at", "be", "br", "ca", "ci", "cl", "cn", "co", "cz", "dk",  
+            "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is", "in", 
+            "ie", "il", "it", "jp", "lt", "lu", "ml", "mx", "nl", "no", "pa", "py",  
+            "pe", "pl", "ps", "ro", "ru", "rs", "sk", "si", "za", "kr", "es", "se",  
+            "ch", "tw", "uk", "us", "uy", "vn", 
+            "iq", "jo", "ps", "so", "sd", "tn")  
+   cc <- tolower(cc) 
+   if (!cc %in% ccs) { 
+     stop("Please specify a LIS country in iso2c format") 
+   } 
+   last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+   yy <- as.character(c(c(63:99), paste0("0", 0:9), c(10:last_year_yy))) 
+  
+   datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+   vars <- c("dhi", "hitotal", "hifactor", "hiprivate", "hcexp", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+  
+   v <- c("market_hh", "market_sqrt", "market_pc", "market_oecdm", "market_ae", 
+          "gross_hh", "gross_sqrt", "gross_pc", "gross_oecdm", "gross_ae", 
+          "disp_hh", "disp_sqrt", "disp_pc", "disp_oecdm", "disp_ae", 
+          "con_hh", "con_sqrt", "con_pc", "con_oecdm", "con_ae") 
+    
+   for (ccyy in datasets) { 
+     cat("") 
+     df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+     if (!class(df)[1] == "try-error") { 
+       mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+       if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+         df <- setups(df) 
+         for (var in v) { 
+           if (grepl("hh", var)) { 
+             df$wt <- df$hpopwgt 
+           } else { 
+             df$wt <- df$hpopwgt * df$nhhmem 
+           } 
+           if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+             cat(paste(ccyy,  
+                       var,  
+                       gini(df, var), 
+                       boot_gini_se(df, var, reps = reps), 
+                       df$grossnet[1], 
+                       sep = ","), sep = "\n") 
+           } 
+         } 
+       } 
+     } 
+   } 
+ } 
>  
> # Call 
> get_ginis("cl") 
[1] "Loading dataset cl90h..."
cl90h,market_hh,0.5809,0.0043,200
cl90h,market_sqrt,0.5542,0.0043,200
cl90h,market_pc,0.5739,0.0042,200
cl90h,market_oecdm,0.5579,0.0049,200
cl90h,market_ae,0.5633,0.0046,200
cl90h,gross_hh,0.524,0.0049,200
cl90h,gross_sqrt,0.5073,0.0044,200
cl90h,gross_pc,0.5281,0.0042,200
cl90h,gross_oecdm,0.5099,0.0049,200
cl90h,gross_ae,0.5158,0.0045,200
cl90h,disp_hh,0.524,0.0045,200
cl90h,disp_sqrt,0.5073,0.0044,200
cl90h,disp_pc,0.5281,0.0045,200
cl90h,disp_oecdm,0.5099,0.0044,200
cl90h,disp_ae,0.5158,0.0042,200
cl90h,con_hh,NaN,NA,200
cl90h,con_sqrt,NaN,NA,200
cl90h,con_pc,NaN,NA,200
cl90h,con_oecdm,NaN,NA,200
cl90h,con_ae,NaN,NA,200
[1] "Loading dataset cl92h..."
cl92h,market_hh,0.5763,0.004,200
cl92h,market_sqrt,0.5489,0.0047,200
cl92h,market_pc,0.5671,0.004,200
cl92h,market_oecdm,0.5505,0.0039,200
cl92h,market_ae,0.5558,0.0039,200
cl92h,gross_hh,0.5269,0.0038,200
cl92h,gross_sqrt,0.5083,0.0044,200
cl92h,gross_pc,0.5273,0.0041,200
cl92h,gross_oecdm,0.5089,0.005,200
cl92h,gross_ae,0.5146,0.0043,200
cl92h,disp_hh,0.5269,0.0037,200
cl92h,disp_sqrt,0.5083,0.0044,200
cl92h,disp_pc,0.5273,0.0036,200
cl92h,disp_oecdm,0.5089,0.0042,200
cl92h,disp_ae,0.5146,0.0037,200
cl92h,con_hh,NaN,NA,200
cl92h,con_sqrt,NaN,NA,200
cl92h,con_pc,NaN,NA,200
cl92h,con_oecdm,NaN,NA,200
cl92h,con_ae,NaN,NA,200
[1] "Loading dataset cl94h..."
cl94h,market_hh,0.5773,0.0035,200
cl94h,market_sqrt,0.5485,0.0037,200
cl94h,market_pc,0.5665,0.0042,200
cl94h,market_oecdm,0.5511,0.0036,200
cl94h,market_ae,0.5561,0.0039,200
cl94h,gross_hh,0.5256,0.0037,200
cl94h,gross_sqrt,0.5064,0.0035,200
cl94h,gross_pc,0.5248,0.0033,200
cl94h,gross_oecdm,0.5081,0.0039,200
cl94h,gross_ae,0.5133,0.0041,200
cl94h,disp_hh,0.5256,0.0035,200
cl94h,disp_sqrt,0.5064,0.0038,200
cl94h,disp_pc,0.5248,0.0036,200
cl94h,disp_oecdm,0.5081,0.0034,200
cl94h,disp_ae,0.5133,0.0036,200
cl94h,con_hh,NaN,NA,200
cl94h,con_sqrt,NaN,NA,200
cl94h,con_pc,NaN,NA,200
cl94h,con_oecdm,NaN,NA,200
cl94h,con_ae,NaN,NA,200
[1] "Loading dataset cl96h..."
cl96h,market_hh,0.5721,0.006,200
cl96h,market_sqrt,0.5471,0.0064,200
cl96h,market_pc,0.5681,0.0059,200
cl96h,market_oecdm,0.5524,0.0068,200
cl96h,market_ae,0.5579,0.0065,200
cl96h,gross_hh,0.5205,0.0064,200
cl96h,gross_sqrt,0.5041,0.0058,200
cl96h,gross_pc,0.5253,0.0057,200
cl96h,gross_oecdm,0.5083,0.0066,200
cl96h,gross_ae,0.514,0.0057,200
cl96h,disp_hh,0.5205,0.0065,200
cl96h,disp_sqrt,0.5041,0.0068,200
cl96h,disp_pc,0.5253,0.0065,200
cl96h,disp_oecdm,0.5083,0.0065,200
cl96h,disp_ae,0.514,0.0066,200
cl96h,con_hh,NaN,NA,200
cl96h,con_sqrt,NaN,NA,200
cl96h,con_pc,NaN,NA,200
cl96h,con_oecdm,NaN,NA,200
cl96h,con_ae,NaN,NA,200
[1] "Loading dataset cl98h..."
cl98h,market_hh,0.5706,0.0042,200
cl98h,market_sqrt,0.5502,0.0042,200
cl98h,market_pc,0.5729,0.0042,200
cl98h,market_oecdm,0.5553,0.0045,200
cl98h,market_ae,0.5614,0.0046,200
cl98h,gross_hh,0.5209,0.0038,200
cl98h,gross_sqrt,0.5098,0.0049,200
cl98h,gross_pc,0.5336,0.004,200
cl98h,gross_oecdm,0.5141,0.0044,200
cl98h,gross_ae,0.5206,0.0045,200
cl98h,disp_hh,0.5209,0.0037,200
cl98h,disp_sqrt,0.5098,0.0044,200
cl98h,disp_pc,0.5336,0.0041,200
cl98h,disp_oecdm,0.5141,0.0045,200
cl98h,disp_ae,0.5206,0.0041,200
cl98h,con_hh,NaN,NA,200
cl98h,con_sqrt,NaN,NA,200
cl98h,con_pc,NaN,NA,200
cl98h,con_oecdm,NaN,NA,200
cl98h,con_ae,NaN,NA,200
[1] "Loading dataset cl00h..."
cl00h,market_hh,0.5922,0.0074,200
cl00h,market_sqrt,0.5749,0.0081,200
cl00h,market_pc,0.596,0.0067,200
cl00h,market_oecdm,0.5819,0.0077,200
cl00h,market_ae,0.587,0.0087,200
cl00h,gross_hh,0.5336,0.0068,200
cl00h,gross_sqrt,0.5257,0.0086,200
cl00h,gross_pc,0.5481,0.0068,200
cl00h,gross_oecdm,0.5322,0.0083,200
cl00h,gross_ae,0.5377,0.0083,200
cl00h,disp_hh,0.5336,0.0077,200
cl00h,disp_sqrt,0.5257,0.009,200
cl00h,disp_pc,0.5481,0.0075,200
cl00h,disp_oecdm,0.5322,0.008,200
cl00h,disp_ae,0.5377,0.0084,200
cl00h,con_hh,NaN,NA,200
cl00h,con_sqrt,NaN,NA,200
cl00h,con_pc,NaN,NA,200
cl00h,con_oecdm,NaN,NA,200
cl00h,con_ae,NaN,NA,200
[1] "Loading dataset cl03h..."
cl03h,market_hh,0.5722,0.0036,200
cl03h,market_sqrt,0.5481,0.0039,200
cl03h,market_pc,0.5722,0.0038,200
cl03h,market_oecdm,0.5531,0.0038,200
cl03h,market_ae,0.5597,0.0036,200
cl03h,gross_hh,0.5178,0.0043,200
cl03h,gross_sqrt,0.5033,0.0039,200
cl03h,gross_pc,0.5282,0.0041,200
cl03h,gross_oecdm,0.5074,0.0038,200
cl03h,gross_ae,0.5144,0.0038,200
cl03h,disp_hh,0.5178,0.0038,200
cl03h,disp_sqrt,0.5033,0.0037,200
cl03h,disp_pc,0.5282,0.0039,200
cl03h,disp_oecdm,0.5074,0.004,200
cl03h,disp_ae,0.5144,0.0033,200
cl03h,con_hh,NaN,NA,200
cl03h,con_sqrt,NaN,NA,200
cl03h,con_pc,NaN,NA,200
cl03h,con_oecdm,NaN,NA,200
cl03h,con_ae,NaN,NA,200
[1] "Loading dataset cl06h..."
cl06h,market_hh,0.553,0.003,200
cl06h,market_sqrt,0.5215,0.0032,200
cl06h,market_pc,0.5458,0.0032,200
cl06h,market_oecdm,0.5268,0.004,200
cl06h,market_ae,0.5335,0.0036,200
cl06h,gross_hh,0.4986,0.0034,200
cl06h,gross_sqrt,0.4763,0.0036,200
cl06h,gross_pc,0.5003,0.0037,200
cl06h,gross_oecdm,0.4805,0.0033,200
cl06h,gross_ae,0.4872,0.0039,200
cl06h,disp_hh,0.4986,0.0036,200
cl06h,disp_sqrt,0.4763,0.0032,200
cl06h,disp_pc,0.5003,0.0039,200
cl06h,disp_oecdm,0.4805,0.0038,200
cl06h,disp_ae,0.4872,0.0036,200
cl06h,con_hh,NaN,NA,200
cl06h,con_sqrt,NaN,NA,200
cl06h,con_pc,NaN,NA,200
cl06h,con_oecdm,NaN,NA,200
cl06h,con_ae,NaN,NA,200
[1] "Loading dataset cl09h..."
cl09h,market_hh,0.5778,0.0064,200
cl09h,market_sqrt,0.5401,0.0066,200
cl09h,market_pc,0.5629,0.0074,200
cl09h,market_oecdm,0.5448,0.0072,200
cl09h,market_ae,0.5511,0.0065,200
cl09h,gross_hh,0.5044,0.007,200
cl09h,gross_sqrt,0.4781,0.0076,200
cl09h,gross_pc,0.5001,0.0074,200
cl09h,gross_oecdm,0.481,0.0065,200
cl09h,gross_ae,0.4873,0.0077,200
cl09h,disp_hh,0.5044,0.007,200
cl09h,disp_sqrt,0.4781,0.0073,200
cl09h,disp_pc,0.5001,0.0079,200
cl09h,disp_oecdm,0.481,0.0069,200
cl09h,disp_ae,0.4873,0.0072,200
cl09h,con_hh,NaN,NA,200
cl09h,con_sqrt,NaN,NA,200
cl09h,con_pc,NaN,NA,200
cl09h,con_oecdm,NaN,NA,200
cl09h,con_ae,NaN,NA,200
[1] "Loading dataset cl11h..."
cl11h,market_hh,0.5651,0.0041,200
cl11h,market_sqrt,0.5263,0.0046,200
cl11h,market_pc,0.5484,0.0039,200
cl11h,market_oecdm,0.5299,0.0042,200
cl11h,market_ae,0.5362,0.0041,200
cl11h,gross_hh,0.4926,0.0037,200
cl11h,gross_sqrt,0.467,0.0039,200
cl11h,gross_pc,0.4892,0.0038,200
cl11h,gross_oecdm,0.469,0.0047,200
cl11h,gross_ae,0.4755,0.0043,200
cl11h,disp_hh,0.4926,0.0043,200
cl11h,disp_sqrt,0.467,0.0047,200
cl11h,disp_pc,0.4892,0.0038,200
cl11h,disp_oecdm,0.469,0.0047,200
cl11h,disp_ae,0.4755,0.0038,200
cl11h,con_hh,NaN,NA,200
cl11h,con_sqrt,NaN,NA,200
cl11h,con_pc,NaN,NA,200
cl11h,con_oecdm,NaN,NA,200
cl11h,con_ae,NaN,NA,200
[1] "Loading dataset cl13h..."
cl13h,market_hh,0.5619,0.0033,200
cl13h,market_sqrt,0.5219,0.0038,200
cl13h,market_pc,0.5467,0.004,200
cl13h,market_oecdm,0.5257,0.0042,200
cl13h,market_ae,0.5329,0.0034,200
cl13h,gross_hh,0.4887,0.0036,200
cl13h,gross_sqrt,0.4602,0.0043,200
cl13h,gross_pc,0.4842,0.0037,200
cl13h,gross_oecdm,0.4625,0.004,200
cl13h,gross_ae,0.4695,0.0036,200
cl13h,disp_hh,0.4887,0.0034,200
cl13h,disp_sqrt,0.4602,0.0043,200
cl13h,disp_pc,0.4842,0.0035,200
cl13h,disp_oecdm,0.4625,0.0036,200
cl13h,disp_ae,0.4695,0.0037,200
cl13h,con_hh,NaN,NA,200
cl13h,con_sqrt,NaN,NA,200
cl13h,con_pc,NaN,NA,200
cl13h,con_oecdm,NaN,NA,200
cl13h,con_ae,NaN,NA,200
[1] "Loading dataset cl15h..."
cl15h,market_hh,0.5539,0.0023,200
cl15h,market_sqrt,0.5122,0.0027,200
cl15h,market_pc,0.5362,0.0028,200
cl15h,market_oecdm,0.5162,0.0027,200
cl15h,market_ae,0.523,0.003,200
cl15h,gross_hh,0.4837,0.0024,200
cl15h,gross_sqrt,0.4533,0.0025,200
cl15h,gross_pc,0.4756,0.0022,200
cl15h,gross_oecdm,0.4554,0.0029,200
cl15h,gross_ae,0.4618,0.0025,200
cl15h,disp_hh,0.4837,0.0023,200
cl15h,disp_sqrt,0.4533,0.0025,200
cl15h,disp_pc,0.4756,0.0031,200
cl15h,disp_oecdm,0.4554,0.0026,200
cl15h,disp_ae,0.4618,0.0028,200
cl15h,con_hh,NaN,NA,200
cl15h,con_sqrt,NaN,NA,200
cl15h,con_pc,NaN,NA,200
cl15h,con_oecdm,NaN,NA,200
cl15h,con_ae,NaN,NA,200
[1] "Loading dataset cl17h..."
cl17h,market_hh,0.5615,0.0026,200
cl17h,market_sqrt,0.5208,0.0032,200
cl17h,market_pc,0.5459,0.0033,200
cl17h,market_oecdm,0.5261,0.0031,200
cl17h,market_ae,0.533,0.0032,200
cl17h,gross_hh,0.4893,0.0028,200
cl17h,gross_sqrt,0.4587,0.0033,200
cl17h,gross_pc,0.482,0.0029,200
cl17h,gross_oecdm,0.4623,0.0034,200
cl17h,gross_ae,0.4686,0.003,200
cl17h,disp_hh,0.4893,0.0033,200
cl17h,disp_sqrt,0.4587,0.0034,200
cl17h,disp_pc,0.482,0.0026,200
cl17h,disp_oecdm,0.4623,0.0031,200
cl17h,disp_ae,0.4686,0.0032,200
cl17h,con_hh,NaN,NA,200
cl17h,con_sqrt,NaN,NA,200
cl17h,con_pc,NaN,NA,200
cl17h,con_oecdm,NaN,NA,200
cl17h,con_ae,NaN,NA,200
> 
> proc.time()
    user   system  elapsed 
 691.966    1.865 1038.083 


