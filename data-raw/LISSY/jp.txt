From: <postbox@lisdatacenter.org>
Subject: job 1362409 jp
Date: June 20, 2025 at 10:34:06 AM CDT
To: <fsolt@mac.com>

############################### NOTICE TO USERS ###############################
                                                                        Use of the data in the LUXEMBOURG INCOME STUDY DATABASES is governed by regulations which do not allow copying or further distribution of the survey microdata.                                                     

Anyone violating these regulations will lose all privileges to the databases and may be subject to prosecution under the law. In addition, any attempt to circumvent the LIS processing system or unauthorized entry into the LIS computing system will result in prosecution.             
All papers written using the LUXEMBOURG INCOME STUDY DATABASES must be  submitted for entry into the Working Papers Series. Users of the LIS or LWS microdata are required to cite the data source in their list of references.                   

Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> 
> 
> 
> 
> 
> 
> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> 
> 
> options(error = expression(q('no')))
> ## Define functions 
> gini <- function(df, x) { 
+   df1 <- df[!is.na(df[[x]]), ] 
+   x <- as.vector(df1[[x]]) 
+   weight <- df1$wt 
+    
+   ox <- order(x) 
+   x <- as.vector(x)[ox] 
+   weight <- as.vector(weight)[ox] / sum(weight)  
+   p <- cumsum(weight) 
+   nu <- cumsum(weight * x) 
+   n <- length(nu) 
+   nu <- nu / nu[n] 
+   res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+   return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+   x <- var[order(var)] 
+   y <- wgt[order(var)] 
+   z <- cumsum(y) / sum(y) 
+   cop <- rep(NA, length(split))  
+   for (i in 1:length(cop)) { 
+     cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+   } 
+   return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+   tb <- ifelse(var < botline, botline, var) 
+   tb <- ifelse(tb > topline, topline, tb) 
+   return(tb) 
+ } 
>  
> setups <- function(df) { 
+   botline <- 0 
+   topline <- exp(log(wNtile(df$dhi, df$hpopwgt, 0.75)) + 3 * (log(wNtile(df$dhi, df$hpopwgt, 0.75)) - log(wNtile(df$dhi, df$hpopwgt, 0.25)))) 
+   df$oecdm <- 1 + .5 * (df$nhhmem - df$nhhmem13 - 1) + .3 * df$nhhmem13 
+   df$ae <- 1 + .7 * (df$nhhmem - df$nhhmem13 - 1) + .5 * df$nhhmem13 
+    
+   df$disp_hh <- topBottom(df$dhi, botline, topline) 
+   df$disp_sqrt <- df$disp_hh / (df$nhhmem ^ 0.5) 
+   df$disp_pc <- df$disp_hh / df$nhhmem 
+   df$disp_oecdm <- df$disp_hh / df$oecdm 
+   df$disp_ae <- df$disp_hh / df$ae 
+    
+   df$gross_hh <- topBottom(df$hitotal, botline, topline) 
+   df$gross_sqrt <- df$gross_hh / (df$nhhmem ^ 0.5) 
+   df$gross_pc <- df$gross_hh / df$nhhmem 
+   df$gross_oecdm <- df$gross_hh / df$oecdm 
+   df$gross_ae <- df$gross_hh / df$ae 
+    
+   df$market_hh <- topBottom(ifelse(!is.na(df$hiprivate), (df$hifactor + df$hiprivate), df$hifactor), botline, topline) 
+   df$market_sqrt <- df$market_hh / (df$nhhmem ^ 0.5) 
+   df$market_pc <- df$market_hh / df$nhhmem 
+   df$market_oecdm <- df$market_hh / df$oecdm 
+   df$market_ae <- df$market_hh / df$ae 
+    
+   df$con_hh <- topBottom(df$hcexp, botline, topline) 
+   df$con_sqrt <- df$con_hh / (df$nhhmem ^ 0.5) 
+   df$con_pc <- df$con_hh / df$nhhmem 
+   df$con_oecdm <- df$con_hh / df$oecdm 
+   df$con_ae <- df$con_hh / df$ae 
+    
+   return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+   data <- data[!is.na(data[[var]]), ] 
+   resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+   r_stat <- lapply(resamples, function(x) gini(x, var)) 
+   std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+   return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(list(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+   set.seed(324) 
+   ccs <- c("au", "at", "be", "br", "ca", "ci", "cl", "cn", "co", "cz", "dk",  
+            "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is", "in", 
+            "ie", "il", "it", "jp", "lt", "lu", "ml", "mx", "nl", "no", "pa", "py",  
+            "pe", "pl", "ps", "ro", "ru", "rs", "sk", "si", "za", "kr", "es", "se",  
+            "ch", "tw", "uk", "us", "uy", "vn", 
+            "iq", "jo", "ps", "so", "sd", "tn")  
+   cc <- tolower(cc) 
+   if (!cc %in% ccs) { 
+     stop("Please specify a LIS country in iso2c format") 
+   } 
+   last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+   yy <- as.character(c(c(63:99), paste0("0", 0:9), c(10:last_year_yy))) 
+  
+   datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+   vars <- c("dhi", "hitotal", "hifactor", "hiprivate", "hcexp", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+  
+   v <- c("market_hh", "market_sqrt", "market_pc", "market_oecdm", "market_ae", 
+          "gross_hh", "gross_sqrt", "gross_pc", "gross_oecdm", "gross_ae", 
+          "disp_hh", "disp_sqrt", "disp_pc", "disp_oecdm", "disp_ae", 
+          "con_hh", "con_sqrt", "con_pc", "con_oecdm", "con_ae") 
+    
+   for (ccyy in datasets) { 
+     cat("") 
+     df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+     if (!class(df)[1] == "try-error") { 
+       mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+       if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+         df <- setups(df) 
+         for (var in v) { 
+           if (grepl("hh", var)) { 
+             df$wt <- df$hpopwgt 
+           } else { 
+             df$wt <- df$hpopwgt * df$nhhmem 
+           } 
+           if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+             cat(paste(ccyy,  
+                       var,  
+                       gini(df, var), 
+                       boot_gini_se(df, var, reps = reps), 
+                       df$grossnet[1], 
+                       sep = ","), sep = "\n") 
+           } 
+         } 
+       } 
+     } 
+   } 
+ } 
>  
> # Call 
> get_ginis("jp") 
[1] "Loading dataset jp08h..."
jp08h,market_hh,0.5131,0.0093,120
jp08h,market_sqrt,0.4601,0.0086,120
jp08h,market_pc,0.4797,0.0061,120
jp08h,market_oecdm,0.4617,0.0079,120
jp08h,market_ae,0.4675,0.0073,120
jp08h,gross_hh,0.39,0.0059,120
jp08h,gross_sqrt,0.3535,0.0065,120
jp08h,gross_pc,0.3697,0.0061,120
jp08h,gross_oecdm,0.3527,0.0073,120
jp08h,gross_ae,0.3573,0.0078,120
jp08h,disp_hh,0.3667,0.0085,120
jp08h,disp_sqrt,0.3292,0.0061,120
jp08h,disp_pc,0.3463,0.0065,120
jp08h,disp_oecdm,0.3282,0.0064,120
jp08h,disp_ae,0.333,0.0054,120
jp08h,con_hh,0.3336,0.0066,120
jp08h,con_sqrt,0.3122,0.0063,120
jp08h,con_pc,0.3504,0.0065,120
jp08h,con_oecdm,0.3179,0.0058,120
jp08h,con_ae,0.3289,0.0059,120
[1] "Loading dataset jp09h..."
jp09h,market_hh,0.4936,0.0073,120
jp09h,market_sqrt,0.4349,0.0068,120
jp09h,market_pc,0.4586,0.0062,120
jp09h,market_oecdm,0.4378,0.0063,120
jp09h,market_ae,0.4447,0.0063,120
jp09h,gross_hh,0.3727,0.0067,120
jp09h,gross_sqrt,0.3331,0.0054,120
jp09h,gross_pc,0.3542,0.005,120
jp09h,gross_oecdm,0.3328,0.0051,120
jp09h,gross_ae,0.339,0.0052,120
jp09h,disp_hh,0.3477,0.0064,120
jp09h,disp_sqrt,0.3076,0.0042,120
jp09h,disp_pc,0.3301,0.0055,120
jp09h,disp_oecdm,0.3071,0.0048,120
jp09h,disp_ae,0.3137,0.0055,120
jp09h,con_hh,0.3327,0.0088,120
jp09h,con_sqrt,0.3092,0.0097,120
jp09h,con_pc,0.3506,0.0084,120
jp09h,con_oecdm,0.315,0.0094,120
jp09h,con_ae,0.3272,0.0079,120
[1] "Loading dataset jp10h..."
jp10h,market_hh,0.491,0.0077,120
jp10h,market_sqrt,0.4289,0.0064,120
jp10h,market_pc,0.4514,0.0065,120
jp10h,market_oecdm,0.4315,0.0064,120
jp10h,market_ae,0.438,0.0072,120
jp10h,gross_hh,0.3604,0.005,120
jp10h,gross_sqrt,0.3182,0.0045,120
jp10h,gross_pc,0.3379,0.005,120
jp10h,gross_oecdm,0.3177,0.0041,120
jp10h,gross_ae,0.3233,0.0042,120
jp10h,disp_hh,0.3373,0.0053,120
jp10h,disp_sqrt,0.2939,0.0038,120
jp10h,disp_pc,0.3155,0.004,120
jp10h,disp_oecdm,0.2935,0.0042,120
jp10h,disp_ae,0.2996,0.0044,120
jp10h,con_hh,0.3145,0.0063,120
jp10h,con_sqrt,0.2918,0.006,120
jp10h,con_pc,0.334,0.006,120
jp10h,con_oecdm,0.2973,0.0053,120
jp10h,con_ae,0.3097,0.0061,120
[1] "Loading dataset jp11h..."
jp11h,market_hh,0.517,0.0082,120
jp11h,market_sqrt,0.4606,0.009,120
jp11h,market_pc,0.4807,0.0083,120
jp11h,market_oecdm,0.4622,0.0081,120
jp11h,market_ae,0.4677,0.0081,120
jp11h,gross_hh,0.3751,0.0074,120
jp11h,gross_sqrt,0.3328,0.0063,120
jp11h,gross_pc,0.3516,0.0064,120
jp11h,gross_oecdm,0.3318,0.0068,120
jp11h,gross_ae,0.3368,0.006,120
jp11h,disp_hh,0.3508,0.0065,120
jp11h,disp_sqrt,0.3085,0.0051,120
jp11h,disp_pc,0.3299,0.0051,120
jp11h,disp_oecdm,0.3078,0.0053,120
jp11h,disp_ae,0.3135,0.0052,120
jp11h,con_hh,0.316,0.0076,120
jp11h,con_sqrt,0.2938,0.0071,120
jp11h,con_pc,0.3352,0.0072,120
jp11h,con_oecdm,0.2986,0.0068,120
jp11h,con_ae,0.311,0.0064,120
[1] "Loading dataset jp12h..."
jp12h,market_hh,0.5066,0.009,120
jp12h,market_sqrt,0.4457,0.0073,120
jp12h,market_pc,0.4667,0.0094,120
jp12h,market_oecdm,0.4475,0.009,120
jp12h,market_ae,0.4536,0.0083,120
jp12h,gross_hh,0.373,0.0062,120
jp12h,gross_sqrt,0.3299,0.0067,120
jp12h,gross_pc,0.3492,0.0069,120
jp12h,gross_oecdm,0.3286,0.0063,120
jp12h,gross_ae,0.3343,0.007,120
jp12h,disp_hh,0.3466,0.0055,120
jp12h,disp_sqrt,0.3037,0.0057,120
jp12h,disp_pc,0.3257,0.006,120
jp12h,disp_oecdm,0.3023,0.0058,120
jp12h,disp_ae,0.3089,0.0054,120
jp12h,con_hh,0.3329,0.0172,120
jp12h,con_sqrt,0.3066,0.0129,120
jp12h,con_pc,0.3508,0.0166,120
jp12h,con_oecdm,0.3134,0.0131,120
jp12h,con_ae,0.3263,0.0139,120
[1] "Loading dataset jp13h..."
jp13h,market_hh,0.4986,0.0094,120
jp13h,market_sqrt,0.4403,0.0093,120
jp13h,market_pc,0.4594,0.0077,120
jp13h,market_oecdm,0.4423,0.0098,120
jp13h,market_ae,0.4477,0.01,120
jp13h,gross_hh,0.3645,0.0071,120
jp13h,gross_sqrt,0.3233,0.0079,120
jp13h,gross_pc,0.339,0.0075,120
jp13h,gross_oecdm,0.3222,0.0063,120
jp13h,gross_ae,0.3265,0.0077,120
jp13h,disp_hh,0.3389,0.007,120
jp13h,disp_sqrt,0.2975,0.0073,120
jp13h,disp_pc,0.3162,0.0075,120
jp13h,disp_oecdm,0.2966,0.0074,120
jp13h,disp_ae,0.3017,0.0058,120
jp13h,con_hh,0.3335,0.0159,120
jp13h,con_sqrt,0.3161,0.0196,120
jp13h,con_pc,0.3549,0.0163,120
jp13h,con_oecdm,0.3207,0.0179,120
jp13h,con_ae,0.3322,0.0158,120
[1] "Loading dataset jp14h..."
jp14h,market_hh,0.4985,0.0109,120
jp14h,market_sqrt,0.439,0.0103,120
jp14h,market_pc,0.4599,0.0098,120
jp14h,market_oecdm,0.4421,0.009,120
jp14h,market_ae,0.4479,0.0081,120
jp14h,gross_hh,0.3588,0.0071,120
jp14h,gross_sqrt,0.3174,0.0082,120
jp14h,gross_pc,0.3349,0.0065,120
jp14h,gross_oecdm,0.3175,0.0083,120
jp14h,gross_ae,0.3222,0.0068,120
jp14h,disp_hh,0.3345,0.0065,120
jp14h,disp_sqrt,0.2927,0.0063,120
jp14h,disp_pc,0.313,0.0055,120
jp14h,disp_oecdm,0.2929,0.0064,120
jp14h,disp_ae,0.2984,0.0058,120
jp14h,con_hh,0.3076,0.0107,120
jp14h,con_sqrt,0.2854,0.0099,120
jp14h,con_pc,0.3314,0.0096,120
jp14h,con_oecdm,0.2927,0.0107,120
jp14h,con_ae,0.3061,0.0102,120
[1] "Loading dataset jp15h..."
jp15h,market_hh,0.5021,0.0082,120
jp15h,market_sqrt,0.4366,0.0087,120
jp15h,market_pc,0.4578,0.0082,120
jp15h,market_oecdm,0.4402,0.0085,120
jp15h,market_ae,0.4459,0.0085,120
jp15h,gross_hh,0.3607,0.0073,120
jp15h,gross_sqrt,0.3157,0.0075,120
jp15h,gross_pc,0.3326,0.0069,120
jp15h,gross_oecdm,0.3159,0.0066,120
jp15h,gross_ae,0.3202,0.0071,120
jp15h,disp_hh,0.3339,0.0066,120
jp15h,disp_sqrt,0.2884,0.0064,120
jp15h,disp_pc,0.3079,0.007,120
jp15h,disp_oecdm,0.2884,0.0061,120
jp15h,disp_ae,0.2936,0.006,120
jp15h,con_hh,0.2968,0.0071,120
jp15h,con_sqrt,0.2816,0.0059,120
jp15h,con_pc,0.3286,0.007,120
jp15h,con_oecdm,0.2904,0.007,120
jp15h,con_ae,0.3039,0.0085,120
[1] "Loading dataset jp16h..."
jp16h,market_hh,0.508,0.0096,120
jp16h,market_sqrt,0.4474,0.0084,120
jp16h,market_pc,0.4683,0.0094,120
jp16h,market_oecdm,0.4506,0.0099,120
jp16h,market_ae,0.4563,0.0107,120
jp16h,gross_hh,0.3649,0.0073,120
jp16h,gross_sqrt,0.324,0.0075,120
jp16h,gross_pc,0.3432,0.0069,120
jp16h,gross_oecdm,0.3253,0.0072,120
jp16h,gross_ae,0.3303,0.0065,120
jp16h,disp_hh,0.338,0.0068,120
jp16h,disp_sqrt,0.2968,0.0068,120
jp16h,disp_pc,0.3185,0.0068,120
jp16h,disp_oecdm,0.2981,0.006,120
jp16h,disp_ae,0.3037,0.0067,120
jp16h,con_hh,0.2934,0.0061,120
jp16h,con_sqrt,0.2751,0.0069,120
jp16h,con_pc,0.3213,0.0071,120
jp16h,con_oecdm,0.2837,0.0066,120
jp16h,con_ae,0.2968,0.0073,120
[1] "Loading dataset jp17h..."
jp17h,market_hh,0.5094,0.0108,120
jp17h,market_sqrt,0.4496,0.0093,120
jp17h,market_pc,0.4719,0.0109,120
jp17h,market_oecdm,0.4552,0.0105,120
jp17h,market_ae,0.461,0.011,120
jp17h,gross_hh,0.3642,0.0058,120
jp17h,gross_sqrt,0.323,0.006,120
jp17h,gross_pc,0.3412,0.0067,120
jp17h,gross_oecdm,0.3257,0.007,120
jp17h,gross_ae,0.3301,0.0067,120
jp17h,disp_hh,0.3385,0.0064,120
jp17h,disp_sqrt,0.2976,0.0059,120
jp17h,disp_pc,0.3181,0.0075,120
jp17h,disp_oecdm,0.3002,0.0074,120
jp17h,disp_ae,0.3052,0.0071,120
jp17h,con_hh,0.2899,0.006,120
jp17h,con_sqrt,0.2715,0.0061,120
jp17h,con_pc,0.3169,0.0069,120
jp17h,con_oecdm,0.2807,0.0074,120
jp17h,con_ae,0.2934,0.0065,120
[1] "Loading dataset jp18h..."
jp18h,market_hh,0.5217,0.0079,120
jp18h,market_sqrt,0.4698,0.008,120
jp18h,market_pc,0.4912,0.0076,120
jp18h,market_oecdm,0.4735,0.0092,120
jp18h,market_ae,0.4789,0.0096,120
jp18h,gross_hh,0.3719,0.0062,120
jp18h,gross_sqrt,0.3354,0.0073,120
jp18h,gross_pc,0.3547,0.0055,120
jp18h,gross_oecdm,0.3383,0.0056,120
jp18h,gross_ae,0.3425,0.0063,120
jp18h,disp_hh,0.3444,0.0061,120
jp18h,disp_sqrt,0.3067,0.0061,120
jp18h,disp_pc,0.3295,0.0049,120
jp18h,disp_oecdm,0.3095,0.0059,120
jp18h,disp_ae,0.3148,0.0053,120
jp18h,con_hh,0.3307,0.0089,120
jp18h,con_sqrt,0.309,0.0083,120
jp18h,con_pc,0.3539,0.0092,120
jp18h,con_oecdm,0.3152,0.0083,120
jp18h,con_ae,0.3278,0.0092,120
[1] "Loading dataset jp19h..."
jp19h,market_hh,0.5118,0.0083,120
jp19h,market_sqrt,0.4551,0.0098,120
jp19h,market_pc,0.4776,0.0076,120
jp19h,market_oecdm,0.4603,0.0102,120
jp19h,market_ae,0.4659,0.009,120
jp19h,gross_hh,0.3766,0.008,120
jp19h,gross_sqrt,0.3381,0.0073,120
jp19h,gross_pc,0.3573,0.0079,120
jp19h,gross_oecdm,0.3414,0.0081,120
jp19h,gross_ae,0.3457,0.0083,120
jp19h,disp_hh,0.3473,0.0069,120
jp19h,disp_sqrt,0.3088,0.0063,120
jp19h,disp_pc,0.3304,0.0067,120
jp19h,disp_oecdm,0.3119,0.007,120
jp19h,disp_ae,0.3169,0.0066,120
jp19h,con_hh,0.3393,0.0146,120
jp19h,con_sqrt,0.3146,0.0117,120
jp19h,con_pc,0.3613,0.0135,120
jp19h,con_oecdm,0.3228,0.0139,120
jp19h,con_ae,0.3362,0.0128,120
[1] "Loading dataset jp20h..."
jp20h,market_hh,0.5145,0.0104,120
jp20h,market_sqrt,0.4583,0.0105,120
jp20h,market_pc,0.4768,0.0088,120
jp20h,market_oecdm,0.4622,0.0102,120
jp20h,market_ae,0.4667,0.0101,120
jp20h,gross_hh,0.3755,0.0094,120
jp20h,gross_sqrt,0.3331,0.0085,120
jp20h,gross_pc,0.3487,0.0075,120
jp20h,gross_oecdm,0.3356,0.0077,120
jp20h,gross_ae,0.3388,0.0079,120
jp20h,disp_hh,0.348,0.0074,120
jp20h,disp_sqrt,0.3051,0.0069,120
jp20h,disp_pc,0.3235,0.0058,120
jp20h,disp_oecdm,0.3076,0.0068,120
jp20h,disp_ae,0.3117,0.0071,120
jp20h,con_hh,0.3419,0.0179,120
jp20h,con_sqrt,0.3152,0.0146,120
jp20h,con_pc,0.3613,0.0204,120
jp20h,con_oecdm,0.3241,0.0164,120
jp20h,con_ae,0.3372,0.0158,120
> 
> proc.time()
   user  system elapsed 
100.255   0.557 102.582 


