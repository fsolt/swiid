From: <postbox@lisdatacenter.org>
Subject: job 1362427 ru
Date: June 20, 2025 at 11:04:42 AM CDT
To: <fsolt@mac.com>

############################### NOTICE TO USERS ###############################
                                                                        Use of the data in the LUXEMBOURG INCOME STUDY DATABASES is governed by regulations which do not allow copying or further distribution of the survey microdata.                                                     

Anyone violating these regulations will lose all privileges to the databases and may be subject to prosecution under the law. In addition, any attempt to circumvent the LIS processing system or unauthorized entry into the LIS computing system will result in prosecution.             
All papers written using the LUXEMBOURG INCOME STUDY DATABASES must be  submitted for entry into the Working Papers Series. Users of the LIS or LWS microdata are required to cite the data source in their list of references.                   

Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> 
> 
> 
> 
> 
> 
> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> 
> 
> options(error = expression(q('no')))
> ## Define functions 
> gini <- function(df, x) { 
+   df1 <- df[!is.na(df[[x]]), ] 
+   x <- as.vector(df1[[x]]) 
+   weight <- df1$wt 
+    
+   ox <- order(x) 
+   x <- as.vector(x)[ox] 
+   weight <- as.vector(weight)[ox] / sum(weight)  
+   p <- cumsum(weight) 
+   nu <- cumsum(weight * x) 
+   n <- length(nu) 
+   nu <- nu / nu[n] 
+   res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+   return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+   x <- var[order(var)] 
+   y <- wgt[order(var)] 
+   z <- cumsum(y) / sum(y) 
+   cop <- rep(NA, length(split))  
+   for (i in 1:length(cop)) { 
+     cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+   } 
+   return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+   tb <- ifelse(var < botline, botline, var) 
+   tb <- ifelse(tb > topline, topline, tb) 
+   return(tb) 
+ } 
>  
> setups <- function(df) { 
+   botline <- 0 
+   topline <- exp(log(wNtile(df$dhi, df$hpopwgt, 0.75)) + 3 * (log(wNtile(df$dhi, df$hpopwgt, 0.75)) - log(wNtile(df$dhi, df$hpopwgt, 0.25)))) 
+   df$oecdm <- 1 + .5 * (df$nhhmem - df$nhhmem13 - 1) + .3 * df$nhhmem13 
+   df$ae <- 1 + .7 * (df$nhhmem - df$nhhmem13 - 1) + .5 * df$nhhmem13 
+    
+   df$disp_hh <- topBottom(df$dhi, botline, topline) 
+   df$disp_sqrt <- df$disp_hh / (df$nhhmem ^ 0.5) 
+   df$disp_pc <- df$disp_hh / df$nhhmem 
+   df$disp_oecdm <- df$disp_hh / df$oecdm 
+   df$disp_ae <- df$disp_hh / df$ae 
+    
+   df$gross_hh <- topBottom(df$hitotal, botline, topline) 
+   df$gross_sqrt <- df$gross_hh / (df$nhhmem ^ 0.5) 
+   df$gross_pc <- df$gross_hh / df$nhhmem 
+   df$gross_oecdm <- df$gross_hh / df$oecdm 
+   df$gross_ae <- df$gross_hh / df$ae 
+    
+   df$market_hh <- topBottom(ifelse(!is.na(df$hiprivate), (df$hifactor + df$hiprivate), df$hifactor), botline, topline) 
+   df$market_sqrt <- df$market_hh / (df$nhhmem ^ 0.5) 
+   df$market_pc <- df$market_hh / df$nhhmem 
+   df$market_oecdm <- df$market_hh / df$oecdm 
+   df$market_ae <- df$market_hh / df$ae 
+    
+   df$con_hh <- topBottom(df$hcexp, botline, topline) 
+   df$con_sqrt <- df$con_hh / (df$nhhmem ^ 0.5) 
+   df$con_pc <- df$con_hh / df$nhhmem 
+   df$con_oecdm <- df$con_hh / df$oecdm 
+   df$con_ae <- df$con_hh / df$ae 
+    
+   return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+   data <- data[!is.na(data[[var]]), ] 
+   resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+   r_stat <- lapply(resamples, function(x) gini(x, var)) 
+   std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+   return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(list(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+   set.seed(324) 
+   ccs <- c("au", "at", "be", "br", "ca", "ci", "cl", "cn", "co", "cz", "dk",  
+            "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is", "in", 
+            "ie", "il", "it", "jp", "lt", "lu", "ml", "mx", "nl", "no", "pa", "py",  
+            "pe", "pl", "ps", "ro", "ru", "rs", "sk", "si", "za", "kr", "es", "se",  
+            "ch", "tw", "uk", "us", "uy", "vn", 
+            "iq", "jo", "ps", "so", "sd", "tn")  
+   cc <- tolower(cc) 
+   if (!cc %in% ccs) { 
+     stop("Please specify a LIS country in iso2c format") 
+   } 
+   last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+   yy <- as.character(c(c(63:99), paste0("0", 0:9), c(10:last_year_yy))) 
+  
+   datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+   vars <- c("dhi", "hitotal", "hifactor", "hiprivate", "hcexp", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+  
+   v <- c("market_hh", "market_sqrt", "market_pc", "market_oecdm", "market_ae", 
+          "gross_hh", "gross_sqrt", "gross_pc", "gross_oecdm", "gross_ae", 
+          "disp_hh", "disp_sqrt", "disp_pc", "disp_oecdm", "disp_ae", 
+          "con_hh", "con_sqrt", "con_pc", "con_oecdm", "con_ae") 
+    
+   for (ccyy in datasets) { 
+     cat("") 
+     df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+     if (!class(df)[1] == "try-error") { 
+       mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+       if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+         df <- setups(df) 
+         for (var in v) { 
+           if (grepl("hh", var)) { 
+             df$wt <- df$hpopwgt 
+           } else { 
+             df$wt <- df$hpopwgt * df$nhhmem 
+           } 
+           if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+             cat(paste(ccyy,  
+                       var,  
+                       gini(df, var), 
+                       boot_gini_se(df, var, reps = reps), 
+                       df$grossnet[1], 
+                       sep = ","), sep = "\n") 
+           } 
+         } 
+       } 
+     } 
+   } 
+ } 
>  
> # Call 
> get_ginis("ru") 
[1] "Loading dataset ru00h..."
ru00h,market_hh,0.6003,0.0105,200
ru00h,market_sqrt,0.5282,0.0098,200
ru00h,market_pc,0.5351,0.0103,200
ru00h,market_oecdm,0.53,0.0105,200
ru00h,market_ae,0.5313,0.0098,200
ru00h,gross_hh,0.4808,0.0095,200
ru00h,gross_sqrt,0.4267,0.0092,200
ru00h,gross_pc,0.4269,0.0111,200
ru00h,gross_oecdm,0.4252,0.0105,200
ru00h,gross_ae,0.4241,0.0107,200
ru00h,disp_hh,0.4808,0.0094,200
ru00h,disp_sqrt,0.4267,0.0106,200
ru00h,disp_pc,0.4269,0.0114,200
ru00h,disp_oecdm,0.4252,0.0114,200
ru00h,disp_ae,0.4241,0.0098,200
ru00h,con_hh,0.5029,0.0111,200
ru00h,con_sqrt,0.4571,0.0124,200
ru00h,con_pc,0.4556,0.0107,200
ru00h,con_oecdm,0.4561,0.0122,200
ru00h,con_ae,0.4544,0.0118,200
[1] "Loading dataset ru04h..."
ru04h,market_hh,0.5829,0.006,200
ru04h,market_sqrt,0.4994,0.0066,200
ru04h,market_pc,0.5056,0.0061,200
ru04h,market_oecdm,0.4978,0.006,200
ru04h,market_ae,0.4997,0.0066,200
ru04h,gross_hh,0.4509,0.0054,200
ru04h,gross_sqrt,0.3904,0.0059,200
ru04h,gross_pc,0.3861,0.0059,200
ru04h,gross_oecdm,0.3833,0.0062,200
ru04h,gross_ae,0.3819,0.006,200
ru04h,disp_hh,0.4509,0.0047,200
ru04h,disp_sqrt,0.3904,0.0053,200
ru04h,disp_pc,0.3861,0.0063,200
ru04h,disp_oecdm,0.3833,0.0059,200
ru04h,disp_ae,0.3819,0.006,200
ru04h,con_hh,0.4837,0.0083,200
ru04h,con_sqrt,0.4392,0.0121,200
ru04h,con_pc,0.4448,0.009,200
ru04h,con_oecdm,0.4403,0.0105,200
ru04h,con_ae,0.4407,0.0104,200
[1] "Loading dataset ru07h..."
ru07h,market_hh,0.5463,0.0058,200
ru07h,market_sqrt,0.4549,0.0053,200
ru07h,market_pc,0.4617,0.006,200
ru07h,market_oecdm,0.454,0.0049,200
ru07h,market_ae,0.4556,0.0051,200
ru07h,gross_hh,0.4169,0.0046,200
ru07h,gross_sqrt,0.3485,0.0048,200
ru07h,gross_pc,0.3458,0.0052,200
ru07h,gross_oecdm,0.3426,0.0049,200
ru07h,gross_ae,0.341,0.0047,200
ru07h,disp_hh,0.4169,0.0044,200
ru07h,disp_sqrt,0.3485,0.0046,200
ru07h,disp_pc,0.3458,0.0052,200
ru07h,disp_oecdm,0.3426,0.0048,200
ru07h,disp_ae,0.341,0.0049,200
ru07h,con_hh,0.4777,0.0078,200
ru07h,con_sqrt,0.4298,0.01,200
ru07h,con_pc,0.4346,0.0077,200
ru07h,con_oecdm,0.4313,0.0086,200
ru07h,con_ae,0.4311,0.01,200
[1] "Loading dataset ru10h..."
ru10h,market_hh,0.5449,0.0054,200
ru10h,market_sqrt,0.4619,0.0053,200
ru10h,market_pc,0.4681,0.006,200
ru10h,market_oecdm,0.4585,0.0056,200
ru10h,market_ae,0.4604,0.0068,200
ru10h,gross_hh,0.3989,0.0043,200
ru10h,gross_sqrt,0.3435,0.0058,200
ru10h,gross_pc,0.3461,0.0051,200
ru10h,gross_oecdm,0.3354,0.0061,200
ru10h,gross_ae,0.336,0.0061,200
ru10h,disp_hh,0.3989,0.0051,200
ru10h,disp_sqrt,0.3435,0.0059,200
ru10h,disp_pc,0.3461,0.0051,200
ru10h,disp_oecdm,0.3354,0.0061,200
ru10h,disp_ae,0.336,0.0059,200
ru10h,con_hh,0.4241,0.0056,200
ru10h,con_sqrt,0.3779,0.0081,200
ru10h,con_pc,0.3938,0.0066,200
ru10h,con_oecdm,0.3794,0.0071,200
ru10h,con_ae,0.3827,0.0067,200
[1] "Loading dataset ru11h..."
ru11h,market_hh,0.5241,0.0058,120
ru11h,market_sqrt,0.4699,0.005,120
ru11h,market_pc,0.4878,0.0059,120
ru11h,market_oecdm,0.4703,0.0055,120
ru11h,market_ae,0.4754,0.0053,120
ru11h,gross_hh,0.4087,0.0054,120
ru11h,gross_sqrt,0.3681,0.0056,120
ru11h,gross_pc,0.3805,0.0046,120
ru11h,gross_oecdm,0.3656,0.0056,120
ru11h,gross_ae,0.3687,0.0055,120
ru11h,disp_hh,0.4035,0.0055,120
ru11h,disp_sqrt,0.3642,0.0057,120
ru11h,disp_pc,0.3771,0.0054,120
ru11h,disp_oecdm,0.3618,0.0051,120
ru11h,disp_ae,0.3649,0.0055,120
ru11h,con_hh,NaN,NA,120
ru11h,con_sqrt,NaN,NA,120
ru11h,con_pc,NaN,NA,120
ru11h,con_oecdm,NaN,NA,120
ru11h,con_ae,NaN,NA,120
[1] "Loading dataset ru13h..."
ru13h,market_hh,0.51,0.0043,120
ru13h,market_sqrt,0.4611,0.0061,120
ru13h,market_pc,0.4804,0.0038,120
ru13h,market_oecdm,0.4611,0.0052,120
ru13h,market_ae,0.4667,0.0048,120
ru13h,gross_hh,0.4001,0.0055,120
ru13h,gross_sqrt,0.3585,0.006,120
ru13h,gross_pc,0.3735,0.0039,120
ru13h,gross_oecdm,0.356,0.0056,120
ru13h,gross_ae,0.3597,0.005,120
ru13h,disp_hh,0.3916,0.0056,120
ru13h,disp_sqrt,0.3506,0.006,120
ru13h,disp_pc,0.3662,0.005,120
ru13h,disp_oecdm,0.348,0.0052,120
ru13h,disp_ae,0.3519,0.0051,120
ru13h,con_hh,NaN,NA,120
ru13h,con_sqrt,NaN,NA,120
ru13h,con_pc,NaN,NA,120
ru13h,con_oecdm,NaN,NA,120
ru13h,con_ae,NaN,NA,120
[1] "Loading dataset ru14h..."
ru14h,market_hh,0.4967,0.0033,120
ru14h,market_sqrt,0.4495,0.0041,120
ru14h,market_pc,0.4743,0.0036,120
ru14h,market_oecdm,0.4512,0.0038,120
ru14h,market_ae,0.4582,0.0031,120
ru14h,gross_hh,0.3883,0.0036,120
ru14h,gross_sqrt,0.3475,0.0038,120
ru14h,gross_pc,0.3678,0.0033,120
ru14h,gross_oecdm,0.3463,0.0031,120
ru14h,gross_ae,0.3516,0.0034,120
ru14h,disp_hh,0.38,0.0038,120
ru14h,disp_sqrt,0.3396,0.0039,120
ru14h,disp_pc,0.3605,0.0034,120
ru14h,disp_oecdm,0.3382,0.004,120
ru14h,disp_ae,0.3437,0.0037,120
ru14h,con_hh,NaN,NA,120
ru14h,con_sqrt,NaN,NA,120
ru14h,con_pc,NaN,NA,120
ru14h,con_oecdm,NaN,NA,120
ru14h,con_ae,NaN,NA,120
[1] "Loading dataset ru15h..."
ru15h,market_hh,0.4829,0.0035,120
ru15h,market_sqrt,0.4395,0.0035,120
ru15h,market_pc,0.4653,0.0032,120
ru15h,market_oecdm,0.4423,0.0037,120
ru15h,market_ae,0.4494,0.0034,120
ru15h,gross_hh,0.3765,0.0032,120
ru15h,gross_sqrt,0.3399,0.0035,120
ru15h,gross_pc,0.3636,0.0031,120
ru15h,gross_oecdm,0.3404,0.0034,120
ru15h,gross_ae,0.3465,0.0035,120
ru15h,disp_hh,0.3673,0.0032,120
ru15h,disp_sqrt,0.3309,0.0037,120
ru15h,disp_pc,0.3555,0.0031,120
ru15h,disp_oecdm,0.3313,0.0031,120
ru15h,disp_ae,0.3376,0.0034,120
ru15h,con_hh,NaN,NA,120
ru15h,con_sqrt,NaN,NA,120
ru15h,con_pc,NaN,NA,120
ru15h,con_oecdm,NaN,NA,120
ru15h,con_ae,NaN,NA,120
[1] "Loading dataset ru16h..."
ru16h,market_hh,0.487,0.0031,120
ru16h,market_sqrt,0.4456,0.0036,120
ru16h,market_pc,0.4736,0.0027,120
ru16h,market_oecdm,0.4487,0.0031,120
ru16h,market_ae,0.4566,0.0028,120
ru16h,gross_hh,0.3761,0.0027,120
ru16h,gross_sqrt,0.3406,0.003,120
ru16h,gross_pc,0.3662,0.0026,120
ru16h,gross_oecdm,0.3413,0.0032,120
ru16h,gross_ae,0.348,0.0027,120
ru16h,disp_hh,0.367,0.0027,120
ru16h,disp_sqrt,0.3315,0.0033,120
ru16h,disp_pc,0.3581,0.003,120
ru16h,disp_oecdm,0.3322,0.0032,120
ru16h,disp_ae,0.3391,0.0036,120
ru16h,con_hh,NaN,NA,120
ru16h,con_sqrt,NaN,NA,120
ru16h,con_pc,NaN,NA,120
ru16h,con_oecdm,NaN,NA,120
ru16h,con_ae,NaN,NA,120
[1] "Loading dataset ru17h..."
ru17h,market_hh,0.4808,0.003,120
ru17h,market_sqrt,0.4347,0.0031,120
ru17h,market_pc,0.4645,0.003,120
ru17h,market_oecdm,0.4372,0.003,120
ru17h,market_ae,0.4458,0.0032,120
ru17h,gross_hh,0.3664,0.0025,120
ru17h,gross_sqrt,0.3278,0.003,120
ru17h,gross_pc,0.3547,0.0031,120
ru17h,gross_oecdm,0.3274,0.0029,120
ru17h,gross_ae,0.3348,0.0034,120
ru17h,disp_hh,0.3564,0.0028,120
ru17h,disp_sqrt,0.318,0.003,120
ru17h,disp_pc,0.346,0.0026,120
ru17h,disp_oecdm,0.3175,0.0031,120
ru17h,disp_ae,0.3251,0.0031,120
ru17h,con_hh,NaN,NA,120
ru17h,con_sqrt,NaN,NA,120
ru17h,con_pc,NaN,NA,120
ru17h,con_oecdm,NaN,NA,120
ru17h,con_ae,NaN,NA,120
[1] "Loading dataset ru18h..."
ru18h,market_hh,0.4812,0.0035,120
ru18h,market_sqrt,0.4347,0.0035,120
ru18h,market_pc,0.4629,0.0033,120
ru18h,market_oecdm,0.437,0.0034,120
ru18h,market_ae,0.4449,0.0033,120
ru18h,gross_hh,0.3675,0.0039,120
ru18h,gross_sqrt,0.3298,0.0037,120
ru18h,gross_pc,0.3546,0.0031,120
ru18h,gross_oecdm,0.3294,0.0035,120
ru18h,gross_ae,0.3359,0.0034,120
ru18h,disp_hh,0.3582,0.003,120
ru18h,disp_sqrt,0.3207,0.0043,120
ru18h,disp_pc,0.3464,0.0034,120
ru18h,disp_oecdm,0.3202,0.0036,120
ru18h,disp_ae,0.3269,0.0034,120
ru18h,con_hh,NaN,NA,120
ru18h,con_sqrt,NaN,NA,120
ru18h,con_pc,NaN,NA,120
ru18h,con_oecdm,NaN,NA,120
ru18h,con_ae,NaN,NA,120
[1] "Loading dataset ru19h..."
ru19h,market_hh,0.4822,0.0059,120
ru19h,market_sqrt,0.4384,0.0058,120
ru19h,market_pc,0.4672,0.005,120
ru19h,market_oecdm,0.4406,0.0072,120
ru19h,market_ae,0.4488,0.0067,120
ru19h,gross_hh,0.369,0.0061,120
ru19h,gross_sqrt,0.3331,0.0066,120
ru19h,gross_pc,0.3589,0.0052,120
ru19h,gross_oecdm,0.3325,0.0065,120
ru19h,gross_ae,0.3394,0.0065,120
ru19h,disp_hh,0.3587,0.0059,120
ru19h,disp_sqrt,0.3228,0.007,120
ru19h,disp_pc,0.3497,0.0056,120
ru19h,disp_oecdm,0.322,0.0067,120
ru19h,disp_ae,0.3292,0.006,120
ru19h,con_hh,NaN,NA,120
ru19h,con_sqrt,NaN,NA,120
ru19h,con_pc,NaN,NA,120
ru19h,con_oecdm,NaN,NA,120
ru19h,con_ae,NaN,NA,120
[1] "Loading dataset ru20h..."
ru20h,market_hh,0.476,0.0032,120
ru20h,market_sqrt,0.4296,0.0035,120
ru20h,market_pc,0.4615,0.0042,120
ru20h,market_oecdm,0.4319,0.0036,120
ru20h,market_ae,0.4413,0.0038,120
ru20h,gross_hh,0.3562,0.0034,120
ru20h,gross_sqrt,0.3129,0.0041,120
ru20h,gross_pc,0.3407,0.0043,120
ru20h,gross_oecdm,0.3122,0.0043,120
ru20h,gross_ae,0.3197,0.0036,120
ru20h,disp_hh,0.3462,0.0039,120
ru20h,disp_sqrt,0.3022,0.0036,120
ru20h,disp_pc,0.3308,0.0043,120
ru20h,disp_oecdm,0.3012,0.0034,120
ru20h,disp_ae,0.309,0.0042,120
ru20h,con_hh,NaN,NA,120
ru20h,con_sqrt,NaN,NA,120
ru20h,con_pc,NaN,NA,120
ru20h,con_oecdm,NaN,NA,120
ru20h,con_ae,NaN,NA,120
[1] "Loading dataset ru21h..."
ru21h,market_hh,0.4772,0.0033,120
ru21h,market_sqrt,0.4325,0.0034,120
ru21h,market_pc,0.4664,0.0036,120
ru21h,market_oecdm,0.4348,0.0029,120
ru21h,market_ae,0.445,0.0035,120
ru21h,gross_hh,0.3636,0.0034,120
ru21h,gross_sqrt,0.3225,0.0036,120
ru21h,gross_pc,0.3513,0.0042,120
ru21h,gross_oecdm,0.3213,0.0037,120
ru21h,gross_ae,0.3295,0.0038,120
ru21h,disp_hh,0.3541,0.0031,120
ru21h,disp_sqrt,0.3126,0.003,120
ru21h,disp_pc,0.3421,0.0046,120
ru21h,disp_oecdm,0.3113,0.0036,120
ru21h,disp_ae,0.3196,0.0031,120
ru21h,con_hh,NaN,NA,120
ru21h,con_sqrt,NaN,NA,120
ru21h,con_pc,NaN,NA,120
ru21h,con_oecdm,NaN,NA,120
ru21h,con_ae,NaN,NA,120
[1] "Loading dataset ru22h..."
ru22h,market_hh,0.4574,0.0073,120
ru22h,market_sqrt,0.4163,0.0089,120
ru22h,market_pc,0.4507,0.0083,120
ru22h,market_oecdm,0.4185,0.007,120
ru22h,market_ae,0.4288,0.0068,120
ru22h,gross_hh,0.3496,0.008,120
ru22h,gross_sqrt,0.3096,0.0099,120
ru22h,gross_pc,0.3408,0.0076,120
ru22h,gross_oecdm,0.3087,0.0071,120
ru22h,gross_ae,0.3176,0.0076,120
ru22h,disp_hh,0.3407,0.0089,120
ru22h,disp_sqrt,0.2998,0.0099,120
ru22h,disp_pc,0.3317,0.0074,120
ru22h,disp_oecdm,0.2985,0.0081,120
ru22h,disp_ae,0.3077,0.0083,120
ru22h,con_hh,NaN,NA,120
ru22h,con_sqrt,NaN,NA,120
ru22h,con_pc,NaN,NA,120
ru22h,con_oecdm,NaN,NA,120
ru22h,con_ae,NaN,NA,120
> 
> proc.time()
   user  system elapsed 
701.401   3.014 717.611 


