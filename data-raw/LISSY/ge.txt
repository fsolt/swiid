From: <postbox@lisdatacenter.org>
Subject: job 1362395 ge
Date: June 20, 2025 at 10:20:02 AM CDT
To: <fsolt@mac.com>

############################### NOTICE TO USERS ###############################
                                                                        Use of the data in the LUXEMBOURG INCOME STUDY DATABASES is governed by regulations which do not allow copying or further distribution of the survey microdata.                                                     

Anyone violating these regulations will lose all privileges to the databases and may be subject to prosecution under the law. In addition, any attempt to circumvent the LIS processing system or unauthorized entry into the LIS computing system will result in prosecution.             
All papers written using the LUXEMBOURG INCOME STUDY DATABASES must be  submitted for entry into the Working Papers Series. Users of the LIS or LWS microdata are required to cite the data source in their list of references.                   

Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> 
> 
> 
> 
> 
> 
> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> 
> 
> options(error = expression(q('no')))
> ## Define functions 
> gini <- function(df, x) { 
+   df1 <- df[!is.na(df[[x]]), ] 
+   x <- as.vector(df1[[x]]) 
+   weight <- df1$wt 
+    
+   ox <- order(x) 
+   x <- as.vector(x)[ox] 
+   weight <- as.vector(weight)[ox] / sum(weight)  
+   p <- cumsum(weight) 
+   nu <- cumsum(weight * x) 
+   n <- length(nu) 
+   nu <- nu / nu[n] 
+   res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+   return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+   x <- var[order(var)] 
+   y <- wgt[order(var)] 
+   z <- cumsum(y) / sum(y) 
+   cop <- rep(NA, length(split))  
+   for (i in 1:length(cop)) { 
+     cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+   } 
+   return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+   tb <- ifelse(var < botline, botline, var) 
+   tb <- ifelse(tb > topline, topline, tb) 
+   return(tb) 
+ } 
>  
> setups <- function(df) { 
+   botline <- 0 
+   topline <- exp(log(wNtile(df$dhi, df$hpopwgt, 0.75)) + 3 * (log(wNtile(df$dhi, df$hpopwgt, 0.75)) - log(wNtile(df$dhi, df$hpopwgt, 0.25)))) 
+   df$oecdm <- 1 + .5 * (df$nhhmem - df$nhhmem13 - 1) + .3 * df$nhhmem13 
+   df$ae <- 1 + .7 * (df$nhhmem - df$nhhmem13 - 1) + .5 * df$nhhmem13 
+    
+   df$disp_hh <- topBottom(df$dhi, botline, topline) 
+   df$disp_sqrt <- df$disp_hh / (df$nhhmem ^ 0.5) 
+   df$disp_pc <- df$disp_hh / df$nhhmem 
+   df$disp_oecdm <- df$disp_hh / df$oecdm 
+   df$disp_ae <- df$disp_hh / df$ae 
+    
+   df$gross_hh <- topBottom(df$hitotal, botline, topline) 
+   df$gross_sqrt <- df$gross_hh / (df$nhhmem ^ 0.5) 
+   df$gross_pc <- df$gross_hh / df$nhhmem 
+   df$gross_oecdm <- df$gross_hh / df$oecdm 
+   df$gross_ae <- df$gross_hh / df$ae 
+    
+   df$market_hh <- topBottom(ifelse(!is.na(df$hiprivate), (df$hifactor + df$hiprivate), df$hifactor), botline, topline) 
+   df$market_sqrt <- df$market_hh / (df$nhhmem ^ 0.5) 
+   df$market_pc <- df$market_hh / df$nhhmem 
+   df$market_oecdm <- df$market_hh / df$oecdm 
+   df$market_ae <- df$market_hh / df$ae 
+    
+   df$con_hh <- topBottom(df$hcexp, botline, topline) 
+   df$con_sqrt <- df$con_hh / (df$nhhmem ^ 0.5) 
+   df$con_pc <- df$con_hh / df$nhhmem 
+   df$con_oecdm <- df$con_hh / df$oecdm 
+   df$con_ae <- df$con_hh / df$ae 
+    
+   return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+   data <- data[!is.na(data[[var]]), ] 
+   resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+   r_stat <- lapply(resamples, function(x) gini(x, var)) 
+   std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+   return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(list(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+   set.seed(324) 
+   ccs <- c("au", "at", "be", "br", "ca", "ci", "cl", "cn", "co", "cz", "dk",  
+            "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is", "in", 
+            "ie", "il", "it", "jp", "lt", "lu", "ml", "mx", "nl", "no", "pa", "py",  
+            "pe", "pl", "ps", "ro", "ru", "rs", "sk", "si", "za", "kr", "es", "se",  
+            "ch", "tw", "uk", "us", "uy", "vn", 
+            "iq", "jo", "ps", "so", "sd", "tn")  
+   cc <- tolower(cc) 
+   if (!cc %in% ccs) { 
+     stop("Please specify a LIS country in iso2c format") 
+   } 
+   last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+   yy <- as.character(c(c(63:99), paste0("0", 0:9), c(10:last_year_yy))) 
+  
+   datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+   vars <- c("dhi", "hitotal", "hifactor", "hiprivate", "hcexp", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+  
+   v <- c("market_hh", "market_sqrt", "market_pc", "market_oecdm", "market_ae", 
+          "gross_hh", "gross_sqrt", "gross_pc", "gross_oecdm", "gross_ae", 
+          "disp_hh", "disp_sqrt", "disp_pc", "disp_oecdm", "disp_ae", 
+          "con_hh", "con_sqrt", "con_pc", "con_oecdm", "con_ae") 
+    
+   for (ccyy in datasets) { 
+     cat("") 
+     df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+     if (!class(df)[1] == "try-error") { 
+       mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+       if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+         df <- setups(df) 
+         for (var in v) { 
+           if (grepl("hh", var)) { 
+             df$wt <- df$hpopwgt 
+           } else { 
+             df$wt <- df$hpopwgt * df$nhhmem 
+           } 
+           if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+             cat(paste(ccyy,  
+                       var,  
+                       gini(df, var), 
+                       boot_gini_se(df, var, reps = reps), 
+                       df$grossnet[1], 
+                       sep = ","), sep = "\n") 
+           } 
+         } 
+       } 
+     } 
+   } 
+ } 
>  
> # Call 
> get_ginis("ge") 
[1] "Loading dataset ge09h..."
ge09h,market_hh,0.6125,0.0083,200
ge09h,market_sqrt,0.565,0.0085,200
ge09h,market_pc,0.5758,0.0094,200
ge09h,market_oecdm,0.5673,0.0099,200
ge09h,market_ae,0.5699,0.0082,200
ge09h,gross_hh,0.5039,0.0081,200
ge09h,gross_sqrt,0.4687,0.009,200
ge09h,gross_pc,0.478,0.0103,200
ge09h,gross_oecdm,0.4693,0.0084,200
ge09h,gross_ae,0.4713,0.0089,200
ge09h,disp_hh,0.5039,0.009,200
ge09h,disp_sqrt,0.4687,0.0095,200
ge09h,disp_pc,0.478,0.0093,200
ge09h,disp_oecdm,0.4693,0.0094,200
ge09h,disp_ae,0.4713,0.0085,200
ge09h,con_hh,0.3954,0.0067,200
ge09h,con_sqrt,0.3477,0.0059,200
ge09h,con_pc,0.3672,0.0061,200
ge09h,con_oecdm,0.3502,0.0068,200
ge09h,con_ae,0.3549,0.0062,200
[1] "Loading dataset ge10h..."
ge10h,market_hh,0.5952,0.007,200
ge10h,market_sqrt,0.546,0.0086,200
ge10h,market_pc,0.5552,0.0094,200
ge10h,market_oecdm,0.5472,0.0076,200
ge10h,market_ae,0.5495,0.0072,200
ge10h,gross_hh,0.4918,0.0065,200
ge10h,gross_sqrt,0.4529,0.0083,200
ge10h,gross_pc,0.4598,0.0081,200
ge10h,gross_oecdm,0.4519,0.0083,200
ge10h,gross_ae,0.4535,0.0086,200
ge10h,disp_hh,0.4918,0.0074,200
ge10h,disp_sqrt,0.4529,0.0081,200
ge10h,disp_pc,0.4598,0.0085,200
ge10h,disp_oecdm,0.4519,0.0084,200
ge10h,disp_ae,0.4535,0.0077,200
ge10h,con_hh,0.4118,0.013,200
ge10h,con_sqrt,0.364,0.0132,200
ge10h,con_pc,0.3805,0.0123,200
ge10h,con_oecdm,0.3652,0.0125,200
ge10h,con_ae,0.3692,0.0126,200
[1] "Loading dataset ge11h..."
ge11h,market_hh,0.5929,0.0095,200
ge11h,market_sqrt,0.5451,0.0122,200
ge11h,market_pc,0.5588,0.0135,200
ge11h,market_oecdm,0.5498,0.0136,200
ge11h,market_ae,0.5528,0.0111,200
ge11h,gross_hh,0.4941,0.0116,200
ge11h,gross_sqrt,0.4554,0.0102,200
ge11h,gross_pc,0.4676,0.0124,200
ge11h,gross_oecdm,0.4582,0.012,200
ge11h,gross_ae,0.4606,0.0122,200
ge11h,disp_hh,0.4941,0.0106,200
ge11h,disp_sqrt,0.4554,0.0131,200
ge11h,disp_pc,0.4676,0.0109,200
ge11h,disp_oecdm,0.4582,0.0131,200
ge11h,disp_ae,0.4606,0.0116,200
ge11h,con_hh,0.3989,0.0056,200
ge11h,con_sqrt,0.3443,0.0055,200
ge11h,con_pc,0.3665,0.0056,200
ge11h,con_oecdm,0.3491,0.0063,200
ge11h,con_ae,0.3541,0.0058,200
[1] "Loading dataset ge12h..."
ge12h,market_hh,0.5538,0.0066,200
ge12h,market_sqrt,0.499,0.0088,200
ge12h,market_pc,0.5113,0.0084,200
ge12h,market_oecdm,0.5013,0.0094,200
ge12h,market_ae,0.5042,0.0076,200
ge12h,gross_hh,0.4554,0.0084,200
ge12h,gross_sqrt,0.4108,0.0085,200
ge12h,gross_pc,0.4223,0.0075,200
ge12h,gross_oecdm,0.4113,0.0072,200
ge12h,gross_ae,0.4138,0.0077,200
ge12h,disp_hh,0.4554,0.0072,200
ge12h,disp_sqrt,0.4108,0.0089,200
ge12h,disp_pc,0.4223,0.0076,200
ge12h,disp_oecdm,0.4113,0.0083,200
ge12h,disp_ae,0.4138,0.0075,200
ge12h,con_hh,0.3886,0.0058,200
ge12h,con_sqrt,0.3382,0.0065,200
ge12h,con_pc,0.3594,0.0069,200
ge12h,con_oecdm,0.3403,0.0069,200
ge12h,con_ae,0.3455,0.0069,200
[1] "Loading dataset ge13h..."
ge13h,market_hh,0.5347,0.0074,200
ge13h,market_sqrt,0.4864,0.0082,200
ge13h,market_pc,0.4997,0.0082,200
ge13h,market_oecdm,0.4907,0.0073,200
ge13h,market_ae,0.4935,0.01,200
ge13h,gross_hh,0.443,0.007,200
ge13h,gross_sqrt,0.4018,0.0073,200
ge13h,gross_pc,0.4151,0.0083,200
ge13h,gross_oecdm,0.4045,0.0082,200
ge13h,gross_ae,0.4071,0.0081,200
ge13h,disp_hh,0.443,0.0071,200
ge13h,disp_sqrt,0.4018,0.0076,200
ge13h,disp_pc,0.4151,0.0077,200
ge13h,disp_oecdm,0.4045,0.0077,200
ge13h,disp_ae,0.4071,0.0086,200
ge13h,con_hh,0.3792,0.007,200
ge13h,con_sqrt,0.3312,0.0076,200
ge13h,con_pc,0.3526,0.0068,200
ge13h,con_oecdm,0.3356,0.0076,200
ge13h,con_ae,0.3405,0.0076,200
[1] "Loading dataset ge14h..."
ge14h,market_hh,0.5321,0.0073,200
ge14h,market_sqrt,0.4875,0.0075,200
ge14h,market_pc,0.5075,0.0085,200
ge14h,market_oecdm,0.4921,0.0079,200
ge14h,market_ae,0.4971,0.0086,200
ge14h,gross_hh,0.4276,0.0064,200
ge14h,gross_sqrt,0.3909,0.0069,200
ge14h,gross_pc,0.4139,0.008,200
ge14h,gross_oecdm,0.3947,0.0069,200
ge14h,gross_ae,0.4004,0.0075,200
ge14h,disp_hh,0.4276,0.007,200
ge14h,disp_sqrt,0.3909,0.0074,200
ge14h,disp_pc,0.4139,0.0077,200
ge14h,disp_oecdm,0.3947,0.0066,200
ge14h,disp_ae,0.4004,0.0068,200
ge14h,con_hh,0.3749,0.0063,200
ge14h,con_sqrt,0.3297,0.0076,200
ge14h,con_pc,0.3542,0.0074,200
ge14h,con_oecdm,0.334,0.0072,200
ge14h,con_ae,0.3399,0.0071,200
[1] "Loading dataset ge15h..."
ge15h,market_hh,0.5416,0.0083,200
ge15h,market_sqrt,0.4858,0.0093,200
ge15h,market_pc,0.5042,0.0096,200
ge15h,market_oecdm,0.4909,0.0087,200
ge15h,market_ae,0.4953,0.0092,200
ge15h,gross_hh,0.4366,0.0076,200
ge15h,gross_sqrt,0.3897,0.0092,200
ge15h,gross_pc,0.4072,0.0092,200
ge15h,gross_oecdm,0.3925,0.0079,200
ge15h,gross_ae,0.3966,0.0092,200
ge15h,disp_hh,0.4366,0.0074,200
ge15h,disp_sqrt,0.3897,0.0074,200
ge15h,disp_pc,0.4072,0.0086,200
ge15h,disp_oecdm,0.3925,0.0082,200
ge15h,disp_ae,0.3966,0.0076,200
ge15h,con_hh,0.3687,0.0062,200
ge15h,con_sqrt,0.3183,0.0065,200
ge15h,con_pc,0.3418,0.0058,200
ge15h,con_oecdm,0.3237,0.0066,200
ge15h,con_ae,0.3288,0.0073,200
[1] "Loading dataset ge16h..."
ge16h,market_hh,0.5349,0.0074,200
ge16h,market_sqrt,0.4831,0.0081,200
ge16h,market_pc,0.5011,0.009,200
ge16h,market_oecdm,0.4865,0.0089,200
ge16h,market_ae,0.4912,0.009,200
ge16h,gross_hh,0.4344,0.0074,200
ge16h,gross_sqrt,0.3913,0.0081,200
ge16h,gross_pc,0.4071,0.0081,200
ge16h,gross_oecdm,0.3923,0.0066,200
ge16h,gross_ae,0.3962,0.0076,200
ge16h,disp_hh,0.4344,0.0071,200
ge16h,disp_sqrt,0.3913,0.0083,200
ge16h,disp_pc,0.4071,0.0079,200
ge16h,disp_oecdm,0.3923,0.0085,200
ge16h,disp_ae,0.3962,0.0077,200
ge16h,con_hh,0.3721,0.0073,200
ge16h,con_sqrt,0.3222,0.0066,200
ge16h,con_pc,0.3456,0.0068,200
ge16h,con_oecdm,0.3261,0.0066,200
ge16h,con_ae,0.3318,0.0064,200
[1] "Loading dataset ge17h..."
ge17h,market_hh,0.5538,0.0099,200
ge17h,market_sqrt,0.5074,0.009,200
ge17h,market_pc,0.5244,0.0093,200
ge17h,market_oecdm,0.5145,0.0107,200
ge17h,market_ae,0.5179,0.01,200
ge17h,gross_hh,0.4447,0.0083,200
ge17h,gross_sqrt,0.4088,0.01,200
ge17h,gross_pc,0.4262,0.0089,200
ge17h,gross_oecdm,0.4141,0.0103,200
ge17h,gross_ae,0.4175,0.0091,200
ge17h,disp_hh,0.4447,0.0087,200
ge17h,disp_sqrt,0.4088,0.0093,200
ge17h,disp_pc,0.4262,0.0097,200
ge17h,disp_oecdm,0.4141,0.01,200
ge17h,disp_ae,0.4175,0.0104,200
ge17h,con_hh,0.3783,0.0077,200
ge17h,con_sqrt,0.3374,0.0074,200
ge17h,con_pc,0.365,0.0082,200
ge17h,con_oecdm,0.3436,0.0086,200
ge17h,con_ae,0.3501,0.0099,200
[1] "Loading dataset ge18h..."
ge18h,market_hh,0.5216,0.0073,200
ge18h,market_sqrt,0.4674,0.008,200
ge18h,market_pc,0.4894,0.0086,200
ge18h,market_oecdm,0.4717,0.0085,200
ge18h,market_ae,0.4773,0.0081,200
ge18h,gross_hh,0.4152,0.0068,200
ge18h,gross_sqrt,0.37,0.0075,200
ge18h,gross_pc,0.3925,0.0082,200
ge18h,gross_oecdm,0.3726,0.0074,200
ge18h,gross_ae,0.3782,0.0079,200
ge18h,disp_hh,0.4152,0.0072,200
ge18h,disp_sqrt,0.37,0.0073,200
ge18h,disp_pc,0.3925,0.0078,200
ge18h,disp_oecdm,0.3726,0.0073,200
ge18h,disp_ae,0.3782,0.0075,200
ge18h,con_hh,0.3606,0.0059,200
ge18h,con_sqrt,0.3086,0.0059,200
ge18h,con_pc,0.3369,0.0062,200
ge18h,con_oecdm,0.3132,0.0059,200
ge18h,con_ae,0.32,0.005,200
[1] "Loading dataset ge19h..."
ge19h,market_hh,0.5338,0.0094,200
ge19h,market_sqrt,0.4782,0.008,200
ge19h,market_pc,0.5012,0.0094,200
ge19h,market_oecdm,0.4836,0.0084,200
ge19h,market_ae,0.4893,0.0101,200
ge19h,gross_hh,0.4261,0.0076,200
ge19h,gross_sqrt,0.3789,0.0074,200
ge19h,gross_pc,0.4023,0.0084,200
ge19h,gross_oecdm,0.3824,0.0075,200
ge19h,gross_ae,0.388,0.0093,200
ge19h,disp_hh,0.4261,0.0084,200
ge19h,disp_sqrt,0.3789,0.007,200
ge19h,disp_pc,0.4023,0.0104,200
ge19h,disp_oecdm,0.3824,0.0075,200
ge19h,disp_ae,0.388,0.0096,200
ge19h,con_hh,0.3657,0.0089,200
ge19h,con_sqrt,0.3151,0.0075,200
ge19h,con_pc,0.3463,0.01,200
ge19h,con_oecdm,0.32,0.0088,200
ge19h,con_ae,0.3277,0.0083,200
[1] "Loading dataset ge20h..."
ge20h,market_hh,0.5199,0.0078,200
ge20h,market_sqrt,0.465,0.0093,200
ge20h,market_pc,0.485,0.0086,200
ge20h,market_oecdm,0.471,0.0086,200
ge20h,market_ae,0.4755,0.0099,200
ge20h,gross_hh,0.4001,0.0068,200
ge20h,gross_sqrt,0.3577,0.0095,200
ge20h,gross_pc,0.3796,0.0088,200
ge20h,gross_oecdm,0.362,0.0089,200
ge20h,gross_ae,0.3668,0.0085,200
ge20h,disp_hh,0.4001,0.0071,200
ge20h,disp_sqrt,0.3577,0.0084,200
ge20h,disp_pc,0.3796,0.0083,200
ge20h,disp_oecdm,0.362,0.009,200
ge20h,disp_ae,0.3668,0.0085,200
ge20h,con_hh,0.3454,0.0061,200
ge20h,con_sqrt,0.2947,0.0061,200
ge20h,con_pc,0.3256,0.0069,200
ge20h,con_oecdm,0.3012,0.0064,200
ge20h,con_ae,0.3083,0.0065,200
[1] "Loading dataset ge21h..."
ge21h,market_hh,0.5164,0.0072,200
ge21h,market_sqrt,0.4593,0.0074,200
ge21h,market_pc,0.4784,0.0082,200
ge21h,market_oecdm,0.4616,0.0082,200
ge21h,market_ae,0.4666,0.0082,200
ge21h,gross_hh,0.3914,0.007,200
ge21h,gross_sqrt,0.3456,0.0067,200
ge21h,gross_pc,0.3694,0.0081,200
ge21h,gross_oecdm,0.3463,0.0062,200
ge21h,gross_ae,0.3526,0.0072,200
ge21h,disp_hh,0.3914,0.0064,200
ge21h,disp_sqrt,0.3456,0.0064,200
ge21h,disp_pc,0.3694,0.0077,200
ge21h,disp_oecdm,0.3463,0.0077,200
ge21h,disp_ae,0.3526,0.0065,200
ge21h,con_hh,0.3329,0.0055,200
ge21h,con_sqrt,0.2804,0.0061,200
ge21h,con_pc,0.3153,0.0062,200
ge21h,con_oecdm,0.2859,0.0059,200
ge21h,con_ae,0.2946,0.0055,200
[1] "Loading dataset ge22h..."
ge22h,market_hh,0.5173,0.0076,200
ge22h,market_sqrt,0.4478,0.0078,200
ge22h,market_pc,0.4673,0.0084,200
ge22h,market_oecdm,0.4516,0.0078,200
ge22h,market_ae,0.4561,0.0082,200
ge22h,gross_hh,0.3991,0.0058,200
ge22h,gross_sqrt,0.3426,0.0066,200
ge22h,gross_pc,0.3628,0.007,200
ge22h,gross_oecdm,0.3433,0.0066,200
ge22h,gross_ae,0.3479,0.0068,200
ge22h,disp_hh,0.3991,0.0064,200
ge22h,disp_sqrt,0.3426,0.0063,200
ge22h,disp_pc,0.3628,0.007,200
ge22h,disp_oecdm,0.3433,0.0057,200
ge22h,disp_ae,0.3479,0.0065,200
ge22h,con_hh,0.3403,0.006,200
ge22h,con_sqrt,0.2785,0.0069,200
ge22h,con_pc,0.3065,0.0056,200
ge22h,con_oecdm,0.2815,0.006,200
ge22h,con_ae,0.2877,0.0056,200
> 
> proc.time()
   user  system elapsed 
 84.740   0.295  86.828 


