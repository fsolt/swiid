From: <postbox@lisdatacenter.org>
Subject: job 1362371 au
Date: June 20, 2025 at 9:29:33 AM CDT
To: <fsolt@mac.com>

############################### NOTICE TO USERS ###############################
                                                                        Use of the data in the LUXEMBOURG INCOME STUDY DATABASES is governed by regulations which do not allow copying or further distribution of the survey microdata.                                                     

Anyone violating these regulations will lose all privileges to the databases and may be subject to prosecution under the law. In addition, any attempt to circumvent the LIS processing system or unauthorized entry into the LIS computing system will result in prosecution.             
All papers written using the LUXEMBOURG INCOME STUDY DATABASES must be  submitted for entry into the Working Papers Series. Users of the LIS or LWS microdata are required to cite the data source in their list of references.                   

Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> 
> 
> 
> 
> 
> 
> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> 
> 
> options(error = expression(q('no')))
> ## Define functions 
> gini <- function(df, x) { 
+   df1 <- df[!is.na(df[[x]]), ] 
+   x <- as.vector(df1[[x]]) 
+   weight <- df1$wt 
+    
+   ox <- order(x) 
+   x <- as.vector(x)[ox] 
+   weight <- as.vector(weight)[ox] / sum(weight)  
+   p <- cumsum(weight) 
+   nu <- cumsum(weight * x) 
+   n <- length(nu) 
+   nu <- nu / nu[n] 
+   res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+   return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+   x <- var[order(var)] 
+   y <- wgt[order(var)] 
+   z <- cumsum(y) / sum(y) 
+   cop <- rep(NA, length(split))  
+   for (i in 1:length(cop)) { 
+     cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+   } 
+   return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+   tb <- ifelse(var < botline, botline, var) 
+   tb <- ifelse(tb > topline, topline, tb) 
+   return(tb) 
+ } 
>  
> setups <- function(df) { 
+   botline <- 0 
+   topline <- exp(log(wNtile(df$dhi, df$hpopwgt, 0.75)) + 3 * (log(wNtile(df$dhi, df$hpopwgt, 0.75)) - log(wNtile(df$dhi, df$hpopwgt, 0.25)))) 
+   df$oecdm <- 1 + .5 * (df$nhhmem - df$nhhmem13 - 1) + .3 * df$nhhmem13 
+   df$ae <- 1 + .7 * (df$nhhmem - df$nhhmem13 - 1) + .5 * df$nhhmem13 
+    
+   df$disp_hh <- topBottom(df$dhi, botline, topline) 
+   df$disp_sqrt <- df$disp_hh / (df$nhhmem ^ 0.5) 
+   df$disp_pc <- df$disp_hh / df$nhhmem 
+   df$disp_oecdm <- df$disp_hh / df$oecdm 
+   df$disp_ae <- df$disp_hh / df$ae 
+    
+   df$gross_hh <- topBottom(df$hitotal, botline, topline) 
+   df$gross_sqrt <- df$gross_hh / (df$nhhmem ^ 0.5) 
+   df$gross_pc <- df$gross_hh / df$nhhmem 
+   df$gross_oecdm <- df$gross_hh / df$oecdm 
+   df$gross_ae <- df$gross_hh / df$ae 
+    
+   df$market_hh <- topBottom(ifelse(!is.na(df$hiprivate), (df$hifactor + df$hiprivate), df$hifactor), botline, topline) 
+   df$market_sqrt <- df$market_hh / (df$nhhmem ^ 0.5) 
+   df$market_pc <- df$market_hh / df$nhhmem 
+   df$market_oecdm <- df$market_hh / df$oecdm 
+   df$market_ae <- df$market_hh / df$ae 
+    
+   df$con_hh <- topBottom(df$hcexp, botline, topline) 
+   df$con_sqrt <- df$con_hh / (df$nhhmem ^ 0.5) 
+   df$con_pc <- df$con_hh / df$nhhmem 
+   df$con_oecdm <- df$con_hh / df$oecdm 
+   df$con_ae <- df$con_hh / df$ae 
+    
+   return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+   data <- data[!is.na(data[[var]]), ] 
+   resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+   r_stat <- lapply(resamples, function(x) gini(x, var)) 
+   std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+   return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(list(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+   set.seed(324) 
+   ccs <- c("au", "at", "be", "br", "ca", "ci", "cl", "cn", "co", "cz", "dk",  
+            "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is", "in", 
+            "ie", "il", "it", "jp", "lt", "lu", "ml", "mx", "nl", "no", "pa", "py",  
+            "pe", "pl", "ps", "ro", "ru", "rs", "sk", "si", "za", "kr", "es", "se",  
+            "ch", "tw", "uk", "us", "uy", "vn", 
+            "iq", "jo", "ps", "so", "sd", "tn")  
+   cc <- tolower(cc) 
+   if (!cc %in% ccs) { 
+     stop("Please specify a LIS country in iso2c format") 
+   } 
+   last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+   yy <- as.character(c(c(63:99), paste0("0", 0:9), c(10:last_year_yy))) 
+  
+   datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+   vars <- c("dhi", "hitotal", "hifactor", "hiprivate", "hcexp", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+  
+   v <- c("market_hh", "market_sqrt", "market_pc", "market_oecdm", "market_ae", 
+          "gross_hh", "gross_sqrt", "gross_pc", "gross_oecdm", "gross_ae", 
+          "disp_hh", "disp_sqrt", "disp_pc", "disp_oecdm", "disp_ae", 
+          "con_hh", "con_sqrt", "con_pc", "con_oecdm", "con_ae") 
+    
+   for (ccyy in datasets) { 
+     cat("") 
+     df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+     if (!class(df)[1] == "try-error") { 
+       mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+       if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+         df <- setups(df) 
+         for (var in v) { 
+           if (grepl("hh", var)) { 
+             df$wt <- df$hpopwgt 
+           } else { 
+             df$wt <- df$hpopwgt * df$nhhmem 
+           } 
+           if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+             cat(paste(ccyy,  
+                       var,  
+                       gini(df, var), 
+                       boot_gini_se(df, var, reps = reps), 
+                       df$grossnet[1], 
+                       sep = ","), sep = "\n") 
+           } 
+         } 
+       } 
+     } 
+   } 
+ } 
>  
> # Call 
> get_ginis("au") 
[1] "Loading dataset au81h..."
au81h,market_hh,0.4628,0.0034,120
au81h,market_sqrt,0.4039,0.0028,120
au81h,market_pc,0.4405,0.0031,120
au81h,gross_hh,0.3771,0.0024,120
au81h,gross_sqrt,0.3278,0.0025,120
au81h,gross_pc,0.3554,0.0026,120
au81h,disp_hh,0.3331,0.0019,120
au81h,disp_sqrt,0.2819,0.0018,120
au81h,disp_pc,0.3133,0.0022,120
au81h,con_hh,NaN,NA,120
au81h,con_sqrt,NaN,NA,120
au81h,con_pc,NaN,NA,120
[1] "Loading dataset au85h..."
au85h,market_hh,0.4948,0.0047,120
au85h,market_sqrt,0.4367,0.0065,120
au85h,market_pc,0.4735,0.0051,120
au85h,gross_hh,0.397,0.0043,120
au85h,gross_sqrt,0.3477,0.0048,120
au85h,gross_pc,0.3748,0.0041,120
au85h,disp_hh,0.3435,0.0027,120
au85h,disp_sqrt,0.293,0.0032,120
au85h,disp_pc,0.325,0.003,120
au85h,con_hh,NaN,NA,120
au85h,con_sqrt,NaN,NA,120
au85h,con_pc,NaN,NA,120
[1] "Loading dataset au89h..."
au89h,market_hh,0.4938,0.0037,120
au89h,market_sqrt,0.4375,0.0031,120
au89h,market_pc,0.4688,0.0033,120
au89h,gross_hh,0.4023,0.0029,120
au89h,gross_sqrt,0.3547,0.0029,120
au89h,gross_pc,0.3777,0.0029,120
au89h,disp_hh,0.353,0.0022,120
au89h,disp_sqrt,0.3039,0.0024,120
au89h,disp_pc,0.3316,0.0027,120
au89h,con_hh,NaN,NA,120
au89h,con_sqrt,NaN,NA,120
au89h,con_pc,NaN,NA,120
[1] "Loading dataset au95h..."
au95h,market_hh,0.5421,0.0051,120
au95h,market_sqrt,0.4783,0.0054,120
au95h,market_pc,0.5063,0.0054,120
au95h,gross_hh,0.4179,0.0041,120
au95h,gross_sqrt,0.36,0.005,120
au95h,gross_pc,0.3759,0.0049,120
au95h,disp_hh,0.3716,0.0038,120
au95h,disp_sqrt,0.3109,0.0034,120
au95h,disp_pc,0.3297,0.0037,120
au95h,con_hh,NaN,NA,120
au95h,con_sqrt,NaN,NA,120
au95h,con_pc,NaN,NA,120
[1] "Loading dataset au01h..."
au01h,market_hh,0.5523,0.0047,120
au01h,market_sqrt,0.4929,0.0063,120
au01h,market_pc,0.5175,0.0053,120
au01h,gross_hh,0.4236,0.0046,120
au01h,gross_sqrt,0.369,0.0044,120
au01h,gross_pc,0.3825,0.0045,120
au01h,disp_hh,0.3773,0.0047,120
au01h,disp_sqrt,0.32,0.0045,120
au01h,disp_pc,0.3378,0.0039,120
au01h,con_hh,NaN,NA,120
au01h,con_sqrt,NaN,NA,120
au01h,con_pc,NaN,NA,120
[1] "Loading dataset au03h..."
au03h,market_hh,0.5415,0.0044,120
au03h,market_sqrt,0.4819,0.0046,120
au03h,market_pc,0.51,0.0048,120
au03h,gross_hh,0.4193,0.0039,120
au03h,gross_sqrt,0.3648,0.0037,120
au03h,gross_pc,0.3829,0.0036,120
au03h,disp_hh,0.3733,0.0031,120
au03h,disp_sqrt,0.3159,0.003,120
au03h,disp_pc,0.3377,0.0031,120
au03h,con_hh,NaN,NA,120
au03h,con_sqrt,NaN,NA,120
au03h,con_pc,NaN,NA,120
[1] "Loading dataset au04h..."
au04h,market_hh,0.5445,0.004,120
au04h,market_sqrt,0.4815,0.0045,120
au04h,market_pc,0.5067,0.0039,120
au04h,market_oecdm,0.4794,0.0041,120
au04h,market_ae,0.4868,0.0038,120
au04h,gross_hh,0.4172,0.0039,120
au04h,gross_sqrt,0.3599,0.0039,120
au04h,gross_pc,0.3743,0.0034,120
au04h,gross_oecdm,0.3534,0.0036,120
au04h,gross_ae,0.3572,0.0036,120
au04h,disp_hh,0.3769,0.003,120
au04h,disp_sqrt,0.3158,0.0027,120
au04h,disp_pc,0.3318,0.0026,120
au04h,disp_oecdm,0.3077,0.0037,120
au04h,disp_ae,0.3118,0.0035,120
au04h,con_hh,0.3618,0.0031,120
au04h,con_sqrt,0.3054,0.0036,120
au04h,con_pc,0.3266,0.0034,120
au04h,con_oecdm,0.2995,0.0033,120
au04h,con_ae,0.3051,0.0034,120
[1] "Loading dataset au08h..."
au08h,market_hh,0.539,0.0051,120
au08h,market_sqrt,0.482,0.0058,120
au08h,market_pc,0.5076,0.0044,120
au08h,market_oecdm,0.4802,0.0056,120
au08h,market_ae,0.4878,0.0054,120
au08h,gross_hh,0.4356,0.0049,120
au08h,gross_sqrt,0.381,0.005,120
au08h,gross_pc,0.3989,0.005,120
au08h,gross_oecdm,0.3758,0.0049,120
au08h,gross_ae,0.3808,0.0053,120
au08h,disp_hh,0.3946,0.0041,120
au08h,disp_sqrt,0.3356,0.0042,120
au08h,disp_pc,0.3553,0.0039,120
au08h,disp_oecdm,0.3292,0.0042,120
au08h,disp_ae,0.3347,0.0049,120
au08h,con_hh,NaN,NA,120
au08h,con_sqrt,NaN,NA,120
au08h,con_pc,NaN,NA,120
au08h,con_oecdm,NaN,NA,120
au08h,con_ae,NaN,NA,120
[1] "Loading dataset au10h..."
au10h,market_hh,0.5421,0.0039,120
au10h,market_sqrt,0.4834,0.0044,120
au10h,market_pc,0.5042,0.0044,120
au10h,market_oecdm,0.4828,0.0044,120
au10h,market_ae,0.4887,0.0041,120
au10h,gross_hh,0.4259,0.0038,120
au10h,gross_sqrt,0.3721,0.0045,120
au10h,gross_pc,0.3841,0.0036,120
au10h,gross_oecdm,0.3668,0.004,120
au10h,gross_ae,0.3699,0.0044,120
au10h,disp_hh,0.3896,0.0035,120
au10h,disp_sqrt,0.3334,0.0042,120
au10h,disp_pc,0.3482,0.0031,120
au10h,disp_oecdm,0.3266,0.0038,120
au10h,disp_ae,0.3307,0.0033,120
au10h,con_hh,0.3703,0.0038,120
au10h,con_sqrt,0.3159,0.0041,120
au10h,con_pc,0.3345,0.0034,120
au10h,con_oecdm,0.3112,0.0042,120
au10h,con_ae,0.3157,0.0035,120
[1] "Loading dataset au14h..."
au14h,market_hh,0.5548,0.0044,120
au14h,market_sqrt,0.4918,0.0062,120
au14h,market_pc,0.5096,0.0056,120
au14h,market_oecdm,0.4923,0.0054,120
au14h,market_ae,0.4968,0.0056,120
au14h,gross_hh,0.4384,0.0051,120
au14h,gross_sqrt,0.3808,0.0054,120
au14h,gross_pc,0.3898,0.0051,120
au14h,gross_oecdm,0.3775,0.0049,120
au14h,gross_ae,0.3789,0.0059,120
au14h,disp_hh,0.391,0.004,120
au14h,disp_sqrt,0.3292,0.0049,120
au14h,disp_pc,0.3427,0.0037,120
au14h,disp_oecdm,0.3245,0.0045,120
au14h,disp_ae,0.3274,0.0046,120
au14h,con_hh,NaN,NA,120
au14h,con_sqrt,NaN,NA,120
au14h,con_pc,NaN,NA,120
au14h,con_oecdm,NaN,NA,120
au14h,con_ae,NaN,NA,120
[1] "Loading dataset au16h..."
au16h,market_hh,0.5511,0.0049,120
au16h,market_sqrt,0.4849,0.0067,120
au16h,market_pc,0.5025,0.0052,120
au16h,market_oecdm,0.4851,0.0053,120
au16h,market_ae,0.4897,0.0052,120
au16h,gross_hh,0.4325,0.005,120
au16h,gross_sqrt,0.375,0.0047,120
au16h,gross_pc,0.3823,0.0047,120
au16h,gross_oecdm,0.3712,0.0052,120
au16h,gross_ae,0.3723,0.0052,120
au16h,disp_hh,0.3872,0.0035,120
au16h,disp_sqrt,0.3266,0.0048,120
au16h,disp_pc,0.3382,0.0036,120
au16h,disp_oecdm,0.3214,0.0036,120
au16h,disp_ae,0.3238,0.0044,120
au16h,con_hh,0.3759,0.0044,120
au16h,con_sqrt,0.3201,0.0057,120
au16h,con_pc,0.3348,0.0047,120
au16h,con_oecdm,0.3168,0.0054,120
au16h,con_ae,0.32,0.0054,120
[1] "Loading dataset au18h..."
au18h,market_hh,0.5461,0.0053,120
au18h,market_sqrt,0.4819,0.0053,120
au18h,market_pc,0.4998,0.0052,120
au18h,market_oecdm,0.4805,0.005,120
au18h,market_ae,0.4855,0.0054,120
au18h,gross_hh,0.4334,0.0053,120
au18h,gross_sqrt,0.3763,0.0053,120
au18h,gross_pc,0.3858,0.004,120
au18h,gross_oecdm,0.372,0.0049,120
au18h,gross_ae,0.374,0.0045,120
au18h,disp_hh,0.3889,0.0047,120
au18h,disp_sqrt,0.3287,0.0053,120
au18h,disp_pc,0.3424,0.005,120
au18h,disp_oecdm,0.3234,0.0057,120
au18h,disp_ae,0.3267,0.0047,120
au18h,con_hh,NaN,NA,120
au18h,con_sqrt,NaN,NA,120
au18h,con_pc,NaN,NA,120
au18h,con_oecdm,NaN,NA,120
au18h,con_ae,NaN,NA,120
[1] "Loading dataset au20h..."
au20h,market_hh,0.5465,0.0043,120
au20h,market_sqrt,0.4804,0.0044,120
au20h,market_pc,0.4993,0.0038,120
au20h,market_oecdm,0.4801,0.0046,120
au20h,market_ae,0.4852,0.0051,120
au20h,gross_hh,0.4323,0.0044,120
au20h,gross_sqrt,0.3742,0.0041,120
au20h,gross_pc,0.3844,0.0039,120
au20h,gross_oecdm,0.3708,0.0043,120
au20h,gross_ae,0.3728,0.0041,120
au20h,disp_hh,0.3864,0.0039,120
au20h,disp_sqrt,0.3253,0.0037,120
au20h,disp_pc,0.3402,0.004,120
au20h,disp_oecdm,0.3208,0.0038,120
au20h,disp_ae,0.3242,0.0041,120
au20h,con_hh,NaN,NA,120
au20h,con_sqrt,NaN,NA,120
au20h,con_pc,NaN,NA,120
au20h,con_oecdm,NaN,NA,120
au20h,con_ae,NaN,NA,120
> 
> proc.time()
   user  system elapsed 
132.635   0.430 244.658 


