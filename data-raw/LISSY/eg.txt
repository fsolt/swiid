From: <postbox@lisdatacenter.org>
Subject: job 1362442 eg
Date: June 20, 2025 at 11:13:29 AM CDT
To: <fsolt@mac.com>

############################### NOTICE TO USERS ###############################
                                                                        Use of the data in the LUXEMBOURG INCOME STUDY DATABASES is governed by regulations which do not allow copying or further distribution of the survey microdata.                                                     

Anyone violating these regulations will lose all privileges to the databases and may be subject to prosecution under the law. In addition, any attempt to circumvent the LIS processing system or unauthorized entry into the LIS computing system will result in prosecution.             
All papers written using the LUXEMBOURG INCOME STUDY DATABASES must be  submitted for entry into the Working Papers Series. Users of the LIS/ LWS/ERFLIS microdata are required to cite the data source in their list of references.                   

Please consult our web site for more information at WWW.LISDATACENTER.ORG
                                                                        
############################### NOTICE TO USERS ###############################

> options(echo=FALSE, encoding="UTF-8")
Loading required package: readstata13
> options(error = expression(q('no')))
> ## Define functions 
> gini <- function(df, x) { 
+     df1 <- df[!is.na(df[[x]]), ] 
+     x <- as.vector(df1[[x]]) 
+     weight <- df1$wt 
+      
+     ox <- order(x) 
+     x <- as.vector(x)[ox] 
+     weight <- as.vector(weight)[ox] / sum(weight)  
+     p <- cumsum(weight) 
+     nu <- cumsum(weight * x) 
+     n <- length(nu) 
+     nu <- nu / nu[n] 
+     res <- round((sum(nu[-1] * p[-n]) - sum(nu[-n] * p[-1])), digits = 4) 
+     return(res) 
+ } 
>  
> wNtile <- function(var, wgt, split) { 
+     x <- var[order(var)] 
+     y <- wgt[order(var)] 
+     z <- cumsum(y) / sum(y) 
+     cop <- rep(NA, length(split))  
+     for (i in 1:length(cop)) { 
+         cop[i] <- x[Find(function(h) z[h] > split[i], seq_along(z))] 
+     } 
+     return(cop) 
+ } 
>  
> topBottom <- function(var, botline, topline) { 
+     tb <- ifelse(var < botline, botline, var) 
+     tb <- ifelse(tb > topline, topline, tb) 
+     return(tb) 
+ } 
>  
> setups <- function(df) { 
+     botline <- 0 
+     topline <- exp(log(wNtile(df$dhi, df$hpopwgt, 0.75)) + 3 * (log(wNtile(df$dhi, df$hpopwgt, 0.75)) - log(wNtile(df$dhi, df$hpopwgt, 0.25)))) 
+     df$oecdm <- 1 + .5 * (df$nhhmem - df$nhhmem13 - 1) + .3 * df$nhhmem13 
+     df$ae <- 1 + .7 * (df$nhhmem - df$nhhmem13 - 1) + .5 * df$nhhmem13 
+      
+     df$disp_hh <- topBottom(df$dhi, botline, topline) 
+     df$disp_sqrt <- df$disp_hh / (df$nhhmem ^ 0.5) 
+     df$disp_pc <- df$disp_hh / df$nhhmem 
+     df$disp_oecdm <- df$disp_hh / df$oecdm 
+     df$disp_ae <- df$disp_hh / df$ae 
+      
+     df$gross_hh <- topBottom(df$hitotal, botline, topline) 
+     df$gross_sqrt <- df$gross_hh / (df$nhhmem ^ 0.5) 
+     df$gross_pc <- df$gross_hh / df$nhhmem 
+     df$gross_oecdm <- df$gross_hh / df$oecdm 
+     df$gross_ae <- df$gross_hh / df$ae 
+      
+     df$market_hh <- topBottom(ifelse(!is.na(df$hiprivate), (df$hifactor + df$hiprivate), df$hifactor), botline, topline) 
+     df$market_sqrt <- df$market_hh / (df$nhhmem ^ 0.5) 
+     df$market_pc <- df$market_hh / df$nhhmem 
+     df$market_oecdm <- df$market_hh / df$oecdm 
+     df$market_ae <- df$market_hh / df$ae 
+      
+     df$con_hh <- topBottom(df$hcexp, botline, topline) 
+     df$con_sqrt <- df$con_hh / (df$nhhmem ^ 0.5) 
+     df$con_pc <- df$con_hh / df$nhhmem 
+     df$con_oecdm <- df$con_hh / df$oecdm 
+     df$con_ae <- df$con_hh / df$ae 
+      
+     return(df) 
+ } 
>  
> boot_gini_se <- function(data, var, reps=100) { 
+     data <- data[!is.na(data[[var]]), ] 
+     resamples <- lapply(1:reps, function(i) dplyr::sample_n(data, size = nrow(data), replace=TRUE)) 
+     r_stat <- lapply(resamples, function(x) gini(x, var)) 
+     std_err <- round(sqrt(var(unlist(r_stat))), digits = 4) 
+     return(std_err)    
+ } 
>  
> # For testing at home: 
> # read.LIS <- function(data_file, labels, vars) { 
> #   require(dplyr) 
> #   data_file <- stringr::str_replace(data_file, "h", "ih.dta") 
> #   df <- haven::read_dta(data_file)[, vars] 
> #   if (!labels) { 
> #     df <- df %>% dplyr::mutate_all(list(as.numeric)) 
> #   } 
> #   return(df) 
> # } 
>  
> get_ginis <- function(cc, reps = 100) { 
+     set.seed(324) 
+     ccs <- c("au", "at", "be", "br", "ca", "ci", "cl", "cn", "co", "cz", "dk",  
+              "do", "eg", "ee", "fi", "fr", "de", "ge", "gr", "gt", "hu", "is", "in", 
+              "ie", "il", "it", "jp", "lt", "lu", "ml", "mx", "nl", "no", "pa", "py",  
+              "pe", "pl", "ps", "ro", "ru", "rs", "sk", "si", "za", "kr", "es", "se",  
+              "ch", "tw", "uk", "us", "uy", "vn", 
+              "iq", "jo", "ps", "so", "sd", "tn")  
+     cc <- tolower(cc) 
+     if (!cc %in% ccs) { 
+         stop("Please specify a LIS country in iso2c format") 
+     } 
+     last_year_yy <- as.numeric(format(Sys.Date(), "%Y")) - 2001 
+     yy <- as.character(c(c(63:99), paste0("0", 0:9), c(10:last_year_yy))) 
+      
+     datasets <- paste0(rep(cc, each = length(yy)), rep(yy, times = length(cc)), "h") 
+     vars <- c("dhi", "hitotal", "hifactor", "hiprivate", "hcexp", "hpopwgt", "nhhmem", "nhhmem13", "grossnet") 
+      
+     v <- c("market_hh", "market_sqrt", "market_pc", "market_oecdm", "market_ae", 
+            "gross_hh", "gross_sqrt", "gross_pc", "gross_oecdm", "gross_ae", 
+            "disp_hh", "disp_sqrt", "disp_pc", "disp_oecdm", "disp_ae", 
+            "con_hh", "con_sqrt", "con_pc", "con_oecdm", "con_ae") 
+      
+     for (ccyy in datasets) { 
+         cat("") 
+         df <- try(read.LIS(ccyy, labels = FALSE, vars = vars), silent = TRUE) 
+         if (!class(df)[1] == "try-error") { 
+             mean_dhi <- mean(df$dhi, na.rm = TRUE) 
+             if (!is.nan(mean_dhi) & !mean_dhi == 0) { 
+                 df <- setups(df) 
+                 for (var in v) { 
+                     if (grepl("hh", var)) { 
+                         df$wt <- df$hpopwgt 
+                     } else { 
+                         df$wt <- df$hpopwgt * df$nhhmem 
+                     } 
+                     if (!is.na(mean(df[[var]], na.rm = TRUE))) { 
+                         cat(paste(ccyy,  
+                                   var,  
+                                   gini(df, var), 
+                                   boot_gini_se(df, var, reps = reps), 
+                                   df$grossnet[1], 
+                                   sep = ","), sep = "\n") 
+                     } 
+                 } 
+             } 
+         } 
+     } 
+ } 
>  
> # Call 
> get_ginis("eg") 
[1] "Loading dataset eg99h..."
eg99h,market_hh,0.344,0.0023,200
eg99h,market_sqrt,0.3144,0.0024,200
eg99h,market_pc,0.3577,0.0022,200
eg99h,market_oecdm,0.3223,0.0024,200
eg99h,market_ae,0.3345,0.0024,200
eg99h,gross_hh,0.344,0.0022,200
eg99h,gross_sqrt,0.3144,0.0023,200
eg99h,gross_pc,0.3577,0.0027,200
eg99h,gross_oecdm,0.3223,0.0026,200
eg99h,gross_ae,0.3345,0.0027,200
eg99h,disp_hh,0.344,0.002,200
eg99h,disp_sqrt,0.3144,0.0024,200
eg99h,disp_pc,0.3577,0.0025,200
eg99h,disp_oecdm,0.3223,0.0025,200
eg99h,disp_ae,0.3345,0.0025,200
eg99h,con_hh,0.3302,0.0021,200
eg99h,con_sqrt,0.2972,0.0023,200
eg99h,con_pc,0.339,0.0021,200
eg99h,con_oecdm,0.3054,0.0023,200
eg99h,con_ae,0.3169,0.0023,200
[1] "Loading dataset eg04h..."
eg04h,market_hh,0.3405,0.0017,200
eg04h,market_sqrt,0.3135,0.002,200
eg04h,market_pc,0.3503,0.0018,200
eg04h,market_oecdm,0.3166,0.0017,200
eg04h,market_ae,0.3275,0.0019,200
eg04h,gross_hh,0.3405,0.0017,200
eg04h,gross_sqrt,0.3135,0.0017,200
eg04h,gross_pc,0.3503,0.0015,200
eg04h,gross_oecdm,0.3166,0.0019,200
eg04h,gross_ae,0.3275,0.0018,200
eg04h,disp_hh,0.3405,0.0018,200
eg04h,disp_sqrt,0.3135,0.002,200
eg04h,disp_pc,0.3503,0.0016,200
eg04h,disp_oecdm,0.3166,0.0019,200
eg04h,disp_ae,0.3275,0.002,200
eg04h,con_hh,0.3258,0.0019,200
eg04h,con_sqrt,0.2944,0.0016,200
eg04h,con_pc,0.3305,0.0017,200
eg04h,con_oecdm,0.2986,0.0019,200
eg04h,con_ae,0.3088,0.0018,200
[1] "Loading dataset eg08h..."
eg08h,market_hh,0.3291,0.0027,200
eg08h,market_sqrt,0.2986,0.0026,200
eg08h,market_pc,0.3335,0.0025,200
eg08h,market_oecdm,0.2995,0.0025,200
eg08h,market_ae,0.3105,0.0024,200
eg08h,gross_hh,0.3291,0.0027,200
eg08h,gross_sqrt,0.2986,0.0024,200
eg08h,gross_pc,0.3335,0.0029,200
eg08h,gross_oecdm,0.2995,0.0027,200
eg08h,gross_ae,0.3105,0.0025,200
eg08h,disp_hh,0.3291,0.0024,200
eg08h,disp_sqrt,0.2986,0.0027,200
eg08h,disp_pc,0.3335,0.003,200
eg08h,disp_oecdm,0.2995,0.0027,200
eg08h,disp_ae,0.3105,0.0026,200
eg08h,con_hh,0.3097,0.0023,200
eg08h,con_sqrt,0.2784,0.0024,200
eg08h,con_pc,0.3165,0.0024,200
eg08h,con_oecdm,0.2835,0.0026,200
eg08h,con_ae,0.2944,0.0026,200
[1] "Loading dataset eg10h..."
eg10h,market_hh,0.3218,0.0042,200
eg10h,market_sqrt,0.2934,0.0044,200
eg10h,market_pc,0.3281,0.0042,200
eg10h,market_oecdm,0.2937,0.0047,200
eg10h,market_ae,0.3046,0.0038,200
eg10h,gross_hh,0.3218,0.0043,200
eg10h,gross_sqrt,0.2934,0.004,200
eg10h,gross_pc,0.3281,0.0045,200
eg10h,gross_oecdm,0.2937,0.0049,200
eg10h,gross_ae,0.3046,0.0044,200
eg10h,disp_hh,0.3218,0.0046,200
eg10h,disp_sqrt,0.2934,0.0041,200
eg10h,disp_pc,0.3281,0.0042,200
eg10h,disp_oecdm,0.2937,0.004,200
eg10h,disp_ae,0.3046,0.0049,200
eg10h,con_hh,0.3112,0.0053,200
eg10h,con_sqrt,0.2813,0.0044,200
eg10h,con_pc,0.3166,0.0047,200
eg10h,con_oecdm,0.2846,0.004,200
eg10h,con_ae,0.2948,0.0037,200
[1] "Loading dataset eg12h..."
eg12h,market_hh,0.3104,0.0038,200
eg12h,market_sqrt,0.2812,0.0037,200
eg12h,market_pc,0.3163,0.0036,200
eg12h,market_oecdm,0.2795,0.0037,200
eg12h,market_ae,0.2908,0.0037,200
eg12h,gross_hh,0.3104,0.0042,200
eg12h,gross_sqrt,0.2812,0.0038,200
eg12h,gross_pc,0.3163,0.0044,200
eg12h,gross_oecdm,0.2795,0.0041,200
eg12h,gross_ae,0.2908,0.0038,200
eg12h,disp_hh,0.3104,0.0038,200
eg12h,disp_sqrt,0.2812,0.0041,200
eg12h,disp_pc,0.3163,0.0043,200
eg12h,disp_oecdm,0.2795,0.004,200
eg12h,disp_ae,0.2908,0.004,200
eg12h,con_hh,0.3011,0.0039,200
eg12h,con_sqrt,0.2676,0.0039,200
eg12h,con_pc,0.3006,0.0037,200
eg12h,con_oecdm,0.2681,0.0044,200
eg12h,con_ae,0.2778,0.0041,200
[1] "Loading dataset eg15h..."
eg15h,market_hh,0.3291,0.0056,200
eg15h,market_sqrt,0.3075,0.0052,200
eg15h,market_pc,0.3475,0.006,200
eg15h,market_oecdm,0.3052,0.0056,200
eg15h,market_ae,0.3183,0.0052,200
eg15h,gross_hh,0.3291,0.006,200
eg15h,gross_sqrt,0.3075,0.0053,200
eg15h,gross_pc,0.3475,0.0053,200
eg15h,gross_oecdm,0.3052,0.0052,200
eg15h,gross_ae,0.3183,0.0055,200
eg15h,disp_hh,0.3291,0.0055,200
eg15h,disp_sqrt,0.3075,0.0056,200
eg15h,disp_pc,0.3475,0.0054,200
eg15h,disp_oecdm,0.3052,0.0057,200
eg15h,disp_ae,0.3183,0.0057,200
eg15h,con_hh,0.3068,0.0056,200
eg15h,con_sqrt,0.2778,0.0051,200
eg15h,con_pc,0.3142,0.0051,200
eg15h,con_oecdm,0.2757,0.0057,200
eg15h,con_ae,0.2871,0.0052,200
[1] "Loading dataset eg17h..."
eg17h,market_hh,0.3097,0.0041,200
eg17h,market_sqrt,0.2908,0.0043,200
eg17h,market_pc,0.3362,0.0044,200
eg17h,market_oecdm,0.2905,0.0045,200
eg17h,market_ae,0.3047,0.0041,200
eg17h,gross_hh,0.3097,0.0042,200
eg17h,gross_sqrt,0.2908,0.0041,200
eg17h,gross_pc,0.3362,0.004,200
eg17h,gross_oecdm,0.2905,0.004,200
eg17h,gross_ae,0.3047,0.0038,200
eg17h,disp_hh,0.3097,0.0043,200
eg17h,disp_sqrt,0.2908,0.0044,200
eg17h,disp_pc,0.3362,0.0042,200
eg17h,disp_oecdm,0.2905,0.0043,200
eg17h,disp_ae,0.3047,0.0039,200
eg17h,con_hh,0.2912,0.0038,200
eg17h,con_sqrt,0.2637,0.0041,200
eg17h,con_pc,0.3008,0.0034,200
eg17h,con_oecdm,0.2627,0.0037,200
eg17h,con_ae,0.2738,0.0035,200
[1] "Loading dataset eg19h..."
eg19h,market_hh,0.3151,0.0042,200
eg19h,market_sqrt,0.2914,0.0036,200
eg19h,market_pc,0.3273,0.0036,200
eg19h,market_oecdm,0.2863,0.0041,200
eg19h,market_ae,0.2983,0.0038,200
eg19h,gross_hh,0.3151,0.0043,200
eg19h,gross_sqrt,0.2914,0.0042,200
eg19h,gross_pc,0.3273,0.0038,200
eg19h,gross_oecdm,0.2863,0.004,200
eg19h,gross_ae,0.2983,0.0048,200
eg19h,disp_hh,0.3151,0.0042,200
eg19h,disp_sqrt,0.2914,0.0046,200
eg19h,disp_pc,0.3273,0.0041,200
eg19h,disp_oecdm,0.2863,0.0041,200
eg19h,disp_ae,0.2983,0.0041,200
eg19h,con_hh,0.3135,0.0043,200
eg19h,con_sqrt,0.2785,0.0045,200
eg19h,con_pc,0.307,0.0043,200
eg19h,con_oecdm,0.2734,0.0041,200
eg19h,con_ae,0.2824,0.0037,200
> 
> proc.time()
   user  system elapsed 
116.724   0.702 120.590 


